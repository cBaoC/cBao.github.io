{"title":"C++多线程","uid":"29c0bb26f17c8d5598125731d7dbd2bf","slug":"C-多线程","date":"2022-07-10T13:36:04.000Z","updated":"2022-07-10T15:46:27.409Z","comments":true,"path":"api/articles/C-多线程.json","keywords":null,"cover":"https://cbaoblog.oss-cn-shanghai.aliyuncs.com/C%2B%2B.png","content":"<h1 id=\"std-thread常用API\"><a href=\"#std-thread常用API\" class=\"headerlink\" title=\"std::thread常用API\"></a>std::thread常用API</h1><table>\n<thead>\n<tr>\n<th align=\"center\">API</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">join</td>\n<td align=\"center\">等待线程结束并清理资源，会阻塞主线程</td>\n</tr>\n<tr>\n<td align=\"center\">joinable</td>\n<td align=\"center\">检测线程是否可以执行join函数，返回bool</td>\n</tr>\n<tr>\n<td align=\"center\">detach</td>\n<td align=\"center\">将线程与调用其的线程分离，彼此独立执行，调用此函数会使其不能被join</td>\n</tr>\n<tr>\n<td align=\"center\">get_id</td>\n<td align=\"center\">获取线程id</td>\n</tr>\n<tr>\n<td align=\"center\">swap</td>\n<td align=\"center\">交换两个线程</td>\n</tr>\n<tr>\n<td align=\"center\">Thread.hardware_concurrency</td>\n<td align=\"center\">获得硬件可创建的线程数量</td>\n</tr>\n</tbody></table>\n<div class=\"custom-quote warning\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 8V13\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 15.99V16.01\"></path>\n</svg>\n</span>\n<p class=\"custom-quote-title\">注意</p>\n<p>使用std::thread需要包含头文件#include <thread></p>\n\n</div>\n<h1 id=\"向线程中传递参数\"><a href=\"#向线程中传递参数\" class=\"headerlink\" title=\"向线程中传递参数\"></a>向线程中传递参数</h1><ul>\n<li><p>向函数中传递参数</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;thread></span></span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">Printf_Fun</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>string Text<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> Text <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\tstd<span class=\"token double-colon punctuation\">::</span>thread <span class=\"token function\">Thread</span><span class=\"token punctuation\">(</span>Printf_Fun<span class=\"token punctuation\">,</span> <span class=\"token string\">\"传递一个参数\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tThread<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>向Lambda表达式中传递参数</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;thread></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> TestAge <span class=\"token operator\">=</span> <span class=\"token number\">24</span><span class=\"token punctuation\">;</span>\n\tstd<span class=\"token double-colon punctuation\">::</span>thread <span class=\"token function\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> s1<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> s1 <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\":\"</span> <span class=\"token operator\">&lt;&lt;</span> TestAge <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"岁\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"我今年\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tThread<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>向类对象中传递参数</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;thread></span></span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Personnel</span>\n<span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">Personnel</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>string InputName<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> InputAge<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span><span class=\"token function\">Name</span><span class=\"token punctuation\">(</span>InputName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Age</span><span class=\"token punctuation\">(</span>InputAge<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">Printf_Info</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token operator\">&amp;</span>ID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\tstd<span class=\"token double-colon punctuation\">::</span>string Name<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> Age<span class=\"token punctuation\">;</span>\n\tstd<span class=\"token double-colon punctuation\">::</span>string ID<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">Personnel</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Printf_Info</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token operator\">&amp;</span> ID<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"姓名:\"</span> <span class=\"token operator\">&lt;&lt;</span> Name <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"年龄:\"</span> <span class=\"token operator\">&lt;&lt;</span> Age <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n\tstd<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ID:\"</span> <span class=\"token operator\">&lt;&lt;</span> ID <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\tPersonnel <span class=\"token function\">Personnel_1</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cBao\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">24</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tstd<span class=\"token double-colon punctuation\">::</span>thread <span class=\"token function\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>Personnel<span class=\"token double-colon punctuation\">::</span>Printf_Info<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>Personnel_1<span class=\"token punctuation\">,</span><span class=\"token string\">\"1059\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tThread<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n","feature":true,"text":"std::thread常用API API 说明 join 等待线程结束并清理资源，会阻塞主线程 joinable 检测线程是否可以执行join函数，返回bool detach 将线程与调用其的线程分离，彼此独立执行，调用此函数会使其不能被join get_id 获取线程id sw...","link":"","photos":[],"count_time":{"symbolsCount":"1.5k","symbolsTime":"1 mins."},"categories":[{"name":"C++","slug":"C","count":1,"path":"api/categories/C.json"}],"tags":[{"name":"多线程","slug":"多线程","count":1,"path":"api/tags/多线程.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#std-thread%E5%B8%B8%E7%94%A8API\"><span class=\"toc-text\">std::thread常用API</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%90%91%E7%BA%BF%E7%A8%8B%E4%B8%AD%E4%BC%A0%E9%80%92%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">向线程中传递参数</span></a></li></ol>","author":{"name":"cBao","slug":"blog-author","avatar":"https://cbaoblog.oss-cn-shanghai.aliyuncs.com/HeadPortrait.jpg","link":"/","description":"但求日积月累，收获于细微。<br /><b>虚幻引擎开发</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"C++多线程","uid":"29c0bb26f17c8d5598125731d7dbd2bf","slug":"C++11多线程","date":"2022-07-10T13:36:04.000Z","updated":"2022-07-10T13:36:04.939Z","comments":true,"path":"api/articles/C++11多线程.json","keywords":null,"cover":null,"text":"","link":"","photos":[],"count_time":{"symbolsCount":0,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"cBao","slug":"blog-author","avatar":"https://cbaoblog.oss-cn-shanghai.aliyuncs.com/HeadPortrait.jpg","link":"/","description":"但求日积月累，收获于细微。<br /><b>虚幻引擎开发</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}