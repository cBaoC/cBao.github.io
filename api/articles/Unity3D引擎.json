{"title":"Unity3D引擎","uid":"2d7fcd3211374fac141da523879cb012","slug":"Unity3D引擎","date":"2022-09-22T15:48:50.000Z","updated":"2022-09-25T09:29:25.174Z","comments":true,"path":"api/articles/Unity3D引擎.json","keywords":null,"cover":"https://cbaoblog.oss-cn-shanghai.aliyuncs.com/UnityLogo.png","content":"<h2 id=\"场景中的对象\"><a href=\"#场景中的对象\" class=\"headerlink\" title=\"场景中的对象\"></a>场景中的对象</h2><ul>\n<li>GameObject类对象是Unity引擎提供作为场景中所有对象的根本</li>\n</ul>\n<h2 id=\"Unity中脚本的基本规则\"><a href=\"#Unity中脚本的基本规则\" class=\"headerlink\" title=\"Unity中脚本的基本规则\"></a>Unity中脚本的基本规则</h2><ul>\n<li>创建规则<ul>\n<li>不在VS中创建脚本</li>\n<li>可以放在Assets文件夹下的任意位置（建议同一文件夹下）</li>\n<li>类名和文件名必须一致，不然不能挂载（因为反射机制创建对象，会通过文件名去找Type） <strong>重要</strong></li>\n<li>不要使用中文命名</li>\n<li>没有特殊需求，不需要管命名空间</li>\n<li>创建的脚本默认继承MonoBehaviour</li>\n</ul>\n</li>\n<li>MonoBehavior基类<ul>\n<li>创建的脚本默认继承MonoBehaviour，继承该类才能挂载到GameObject上</li>\n<li>继承了MonoBehaviour的脚本不能new只能挂载！！！</li>\n<li>继承了MonoBehaviour的脚本不要写构造函数（也可以写，会自动调用），因为不能new，构造函数无意义</li>\n<li>继承了MonoBehaviour的脚本可以在一个对象上挂多个（没有添加DisallowMultipleComponent特性时）</li>\n<li>继承MonoBehaviour的类也可以再次被继承，遵循面向对象继承多态原则</li>\n</ul>\n</li>\n<li>不继承MonoBehaviour的类<ul>\n<li>不继承MonoBehaviour的类不能挂载到GameObject对象上</li>\n<li>不继承MonoBehaviour的类 想怎么写就怎么写 如果要使用 需要自己new实例化一个对象</li>\n<li>不继承MonoBehaviour的类 一般是单例模式的类（用于管理模块）或者数据结构类（用于存储数据）</li>\n<li>不继承MonoBehaviour的类 不用保留默认出现的几个函数</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"在Unity中打印信息的两种方式\"><a href=\"#在Unity中打印信息的两种方式\" class=\"headerlink\" title=\"在Unity中打印信息的两种方式\"></a>在Unity中打印信息的两种方式</h2><ul>\n<li><p>没有继承MonoBehaviour类</p>\n<table>\n<thead>\n<tr>\n<th>API</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Debug.Log(“…”);</td>\n</tr>\n<tr>\n<td>Debug.LogError(“出错”);</td>\n</tr>\n<tr>\n<td>Debug.LogWarning(“警告”);</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>继承了MonoBehaviour类</p>\n<table>\n<thead>\n<tr>\n<th>API</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>print(“…”);</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n<h2 id=\"生命周期函数\"><a href=\"#生命周期函数\" class=\"headerlink\" title=\"生命周期函数\"></a>生命周期函数</h2><ul>\n<li><p>所有继承MonoBehaviour的脚本，最终都会挂载到GameObject游戏对象上</p>\n</li>\n<li><p>生命周期函数就是该脚本对象依附的GameObject对象从出生到消亡的整个生命周期上</p>\n</li>\n<li><p>会通过反射自动调用的一些特殊函数，是Unity自己调用的</p>\n</li>\n<li><p>生命周期函数的访问修饰符一般为private和protected，因为不需要在外部自己调用生命周期函数</p>\n</li>\n<li><p>生命周期函数并不是基类中的成员</p>\n</li>\n<li><p>常用的生命周期函数（从上到下的执行先后）</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">API</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">Awake</td>\n<td align=\"center\">当脚本对象创建时，自动调用，类似构造函数，一个对象只会调用一次</td>\n</tr>\n<tr>\n<td align=\"center\">OnEnable</td>\n<td align=\"center\">依附的GameObject对象每次激活时调用</td>\n</tr>\n<tr>\n<td align=\"center\">Start</td>\n<td align=\"center\">当脚本对象创建后，第一次帧更新之前调用，一个对象只会调用一次（比Awake要晚）</td>\n</tr>\n<tr>\n<td align=\"center\">FixedUpdate</td>\n<td align=\"center\">物理帧更新，固定间隔时间执行，间隔时间可以设置（project Setting -&gt; Time）</td>\n</tr>\n<tr>\n<td align=\"center\">Update</td>\n<td align=\"center\">逻辑帧更新每帧执行</td>\n</tr>\n<tr>\n<td align=\"center\">LateUpdate</td>\n<td align=\"center\">每帧执行，于Update之后执行（一般用来处理摄像机位置更新（防止渲染出错））</td>\n</tr>\n<tr>\n<td align=\"center\">OnDisable</td>\n<td align=\"center\">依附的GameObject对象每次失活时调用</td>\n</tr>\n<tr>\n<td align=\"center\">OnDestroy</td>\n<td align=\"center\">对象销毁时调用，依附的GameObject对象被删除时</td>\n</tr>\n</tbody></table>\n<p><img src=\"https://cbaoblog.oss-cn-shanghai.aliyuncs.com/img/Unity%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%87%BD%E6%95%B0.PNG\" alt=\"Unity生命周期函数\"></p>\n</li>\n<li><p>生命周期函数支持继承多态</p>\n</li>\n</ul>\n<h2 id=\"Inspector窗口可编辑的变量\"><a href=\"#Inspector窗口可编辑的变量\" class=\"headerlink\" title=\"Inspector窗口可编辑的变量\"></a>Inspector窗口可编辑的变量</h2><ul>\n<li>Inspector显示的可编辑内容就是脚本的公共成员变量，默认情况下私有和保护的无法显示编辑</li>\n<li>加上强制序列化字段特性[SerializeField]，可以让私有的和保护的成员也可以被显示编辑</li>\n<li>在公共成员变量前加上[HideInInspector]，可以让公共成员变量在Inspector隐藏，默认是显示的</li>\n<li>大部分类型都能显示编辑<ul>\n<li>自定义类型和Dictionary类型不能显示编辑</li>\n</ul>\n</li>\n<li>加上序列化特性[System.Serializable]可以让自定义类型和结构体可以被显示编辑</li>\n<li>一些辅助特性<ul>\n<li>分组：[Header(“分组说明”)]</li>\n<li>悬停注释：[Tooltip(“说明内容”)]</li>\n<li>间隔特性：[Space()]</li>\n<li>修饰数值的滑条范围Range：[Range(最小值,最大值)]</li>\n<li>多行显示字符串，默认不写参数显示3行：[Multiline()]</li>\n<li>滚动条显示字符串，默认不写参数超过3行显示滚动条：[TextArea(3,4)]最少显示3行，最多显示4行，超过4行显示滚动条</li>\n<li>为变量添加快捷方法：[ContextMenuItem(“显示按钮名”,”方法名”)]，方法名不能有参数</li>\n<li>为方法添加特性能够在Inspector中执行：[ContextMenu(“测试函数”)]</li>\n</ul>\n</li>\n<li>注意<ul>\n<li>Inspector窗口中的变量关联的就是对象的成员变量，运行时改变它们就是在改变成员变量</li>\n<li>拖拽到GameObject对象后，再改变脚本中的变量默认值 界面上不会改变</li>\n<li>运行中修改的信息不会被保存</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"MonoBehaviour中的重要内容\"><a href=\"#MonoBehaviour中的重要内容\" class=\"headerlink\" title=\"MonoBehaviour中的重要内容\"></a>MonoBehaviour中的重要内容</h2><ul>\n<li><p>重要成员</p>\n<ul>\n<li><p>获取依附的GameObject</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>gameObject<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//gameObject与上面一样</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n<li><p>获取依附的GameObject位置信息</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">;</span><span class=\"token comment\">//获得位置信息</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span>eulerAngles<span class=\"token punctuation\">;</span><span class=\"token comment\">//获得欧拉角</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span>lossyScale<span class=\"token punctuation\">;</span><span class=\"token comment\">//获得缩放大小</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>gameObject<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">;</span><span class=\"token comment\">//该方法与以上相同</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>设置脚本是否激活</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>enable<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//失活</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>enable<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//激活</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li><p>重要方法</p>\n<ul>\n<li><p>得到依附对象上挂载的其它脚本</p>\n<ul>\n<li><p>根据脚本名获取，获取失败返回null</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetComponent</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"脚本名\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//使用时用as进行转换使用</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p>根据Type获取</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetComponent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">脚本类型</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p>根据泛型获取 建议使用泛型获取，不用二次转换  <strong>建议使用</strong></p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>脚本类型<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n</li>\n<li><p>得到自己挂载的多个脚本</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetComponents</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>脚本类型<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span>也可以直接用List<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p>得到子对象挂载的脚本（默认也会找自身是否挂载该脚本）</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetComponentInChildren</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>脚本类型<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token operator\">/</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//得单个</span>\n<span class=\"token comment\">//true子对象失活时也会查找，false子对象失活时不会查找</span>\n\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetComponentsInChildren</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>脚本类型<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token operator\">/</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//得多个</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>得到父对象挂载得脚本（默认也会查找自身是否挂载该脚本）</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetComponentInParent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>脚本类型<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//得单个</span>\n<span class=\"token comment\">//true子对象失活时也会查找，false子对象失活时不会查找</span>\n\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetComponentsInParent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>脚本类型<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//得多个</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>尝试获取脚本</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">this.TryGetComponent&lt;脚本类型&gt;(out type);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"GameObject常用成员变量\"><a href=\"#GameObject常用成员变量\" class=\"headerlink\" title=\"GameObject常用成员变量\"></a>GameObject常用成员变量</h2><table>\n<thead>\n<tr>\n<th align=\"center\">API</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">this.gameObject.name</td>\n<td align=\"center\">名字</td>\n</tr>\n<tr>\n<td align=\"center\">this.gameObject.activeSelf</td>\n<td align=\"center\">是否激活</td>\n</tr>\n<tr>\n<td align=\"center\">this.gameObject.isStatic</td>\n<td align=\"center\">是否是静态</td>\n</tr>\n<tr>\n<td align=\"center\">this.gameObject.layer</td>\n<td align=\"center\">层级</td>\n</tr>\n<tr>\n<td align=\"center\">this.gameObject.tag</td>\n<td align=\"center\">标签</td>\n</tr>\n<tr>\n<td align=\"center\">this.gameObject.transform / this.transform</td>\n<td align=\"center\">transform</td>\n</tr>\n</tbody></table>\n<h2 id=\"GameObject常用静态方法\"><a href=\"#GameObject常用静态方法\" class=\"headerlink\" title=\"GameObject常用静态方法\"></a>GameObject常用静态方法</h2><table>\n<thead>\n<tr>\n<th align=\"center\">API</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">GameObject.CreatePrimitive()</td>\n<td align=\"center\">创建自带几何体，会返回一个GameObject对象</td>\n</tr>\n<tr>\n<td align=\"center\">GameObject.Find()</td>\n<td align=\"center\">通过名字查找对象，效率较低，找不到失活对象，有相同名字的对象时，随机查找其中一个</td>\n</tr>\n<tr>\n<td align=\"center\">GameObject.FindWithTag()</td>\n<td align=\"center\">通过标签查找对象，找不到失活对象，有相同标签的对象时，随机查找其中一个</td>\n</tr>\n<tr>\n<td align=\"center\">GameObject.FindGameObjectWithTag()</td>\n<td align=\"center\">通过标签查找对象,与上一个API功能相同</td>\n</tr>\n<tr>\n<td align=\"center\">GameObject.FindGameObjectsWithTag()</td>\n<td align=\"center\">查找多个对象只能tag去找，无法通过名字 ，找不到失活对象</td>\n</tr>\n<tr>\n<td align=\"center\">GameObject.FindObjectOfType&lt;脚本类型&gt;()</td>\n<td align=\"center\">找到场景中挂载的某一个脚本对象，基本不使用，效率低下</td>\n</tr>\n<tr>\n<td align=\"center\">GameObject.instantiate()</td>\n<td align=\"center\">实例化对象，动态创建对象（名字后会增加clone）</td>\n</tr>\n<tr>\n<td align=\"center\">GameObject.Destroy()</td>\n<td align=\"center\">删除对象或者脚本，一般情况下会在下一帧移除对象并从内存中移除，第二个参数代表延迟删除的时间</td>\n</tr>\n<tr>\n<td align=\"center\">GameObject.DestroyImmediate()</td>\n<td align=\"center\">立即删除，不会等到下一帧，没有特殊需求不使用，可能存在卡顿</td>\n</tr>\n<tr>\n<td align=\"center\">GameObject.DontDestroyOnLoad()</td>\n<td align=\"center\">对象过场景不被移除（Unity默认过场景时场景中的对象都会自动删除掉）</td>\n</tr>\n</tbody></table>\n<h2 id=\"GameObject常用的成员方法\"><a href=\"#GameObject常用的成员方法\" class=\"headerlink\" title=\"GameObject常用的成员方法\"></a>GameObject常用的成员方法</h2><table>\n<thead>\n<tr>\n<th align=\"center\">API</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">new GameObject()</td>\n<td align=\"center\">创建一个空物体，存在重载，可以创建的同时添加脚本</td>\n</tr>\n<tr>\n<td align=\"center\">Obj.AddComponent&lt;脚本类型&gt;()</td>\n<td align=\"center\">为对象添加脚本</td>\n</tr>\n<tr>\n<td align=\"center\">Obj.SetActive()</td>\n<td align=\"center\">设置对象的激活和失活</td>\n</tr>\n<tr>\n<td align=\"center\">this.CompareTag()</td>\n<td align=\"center\">标签比较</td>\n</tr>\n<tr>\n<td align=\"center\">this.gameObject.SendMessage(“函数名”)</td>\n<td align=\"center\">执行挂载自身所有同名函数的行为 效率低下，不建议使用</td>\n</tr>\n<tr>\n<td align=\"center\">this.gameObject.BroadcastMessage(“函数名”)</td>\n<td align=\"center\">广播行为，让自己和自己子对象执行相同函数名的函数</td>\n</tr>\n<tr>\n<td align=\"center\">this.gameObject.SendMessageUpwards(“函数名”)</td>\n<td align=\"center\">向父对象和自己发送消息并执行相同函数名的函数</td>\n</tr>\n</tbody></table>\n<h2 id=\"Unity中的Object不是指的万物之父的object\"><a href=\"#Unity中的Object不是指的万物之父的object\" class=\"headerlink\" title=\"Unity中的Object不是指的万物之父的object\"></a>Unity中的Object不是指的万物之父的object</h2><h2 id=\"Time\"><a href=\"#Time\" class=\"headerlink\" title=\"Time\"></a>Time</h2><ul>\n<li><p>主要用于游戏中参与位移，计时，时间暂停等</p>\n</li>\n<li><p>时间缩放比例</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token comment\">//时间停止</span>\nTime<span class=\"token punctuation\">.</span>timeScale<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//恢复正常</span>\nTime<span class=\"token punctuation\">.</span>timeScale<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//2倍速</span>\nTime<span class=\"token punctuation\">.</span>timeScale<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>帧间隔时间：最近的一帧用了多长时间，主要用来计算位移</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token comment\">//受Scale影响</span>\nTime<span class=\"token punctuation\">.</span>deltaTime<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//不受Scale影响的帧间隔时间</span>\nTime<span class=\"token punctuation\">.</span>unscaledDeltaTime<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>游戏开始到现在的时间</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token comment\">//受Scale影响</span>\nTime<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//受Scale影响</span>\nTime<span class=\"token punctuation\">.</span>unscaledTime<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>物理帧间隔时间 FixedUpdate</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token comment\">//受Scale影响</span>\nTime<span class=\"token punctuation\">.</span>fixedDeltaTime<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//不受Scale影响</span>\nTime<span class=\"token punctuation\">.</span>fixedUnscaledDeltaTime<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>帧数</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token comment\">//从开始到现在游戏跑了多少帧</span>\nTime<span class=\"token punctuation\">.</span>frameCount<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"Transform\"><a href=\"#Transform\" class=\"headerlink\" title=\"Transform\"></a>Transform</h2><ul>\n<li><p>Vector3</p>\n<ul>\n<li><p>主要用来表示三维坐标系中的一个点或者向量</p>\n</li>\n<li><p>常用</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">API</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">Vector3.zero</td>\n<td align=\"center\">(0,0,0)</td>\n</tr>\n<tr>\n<td align=\"center\">Vector3.right</td>\n<td align=\"center\">(1,0,0) X轴正方向</td>\n</tr>\n<tr>\n<td align=\"center\">Vector3.left</td>\n<td align=\"center\">(-1,0,0)</td>\n</tr>\n<tr>\n<td align=\"center\">Vector3.forward</td>\n<td align=\"center\">(0,0,1) Z轴正方向为面朝向</td>\n</tr>\n<tr>\n<td align=\"center\">Vector3.back</td>\n<td align=\"center\">(0,0,-1)</td>\n</tr>\n<tr>\n<td align=\"center\">Vector3.up</td>\n<td align=\"center\">（0,1,0）Y轴正方向</td>\n</tr>\n<tr>\n<td align=\"center\">Vector3.down</td>\n<td align=\"center\">（0,-1,0）</td>\n</tr>\n<tr>\n<td align=\"center\">Vector3.Distance</td>\n<td align=\"center\">计算两个点之间的距离</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n</li>\n<li><p>位置和位移</p>\n<ul>\n<li><p>相对世界坐标系</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p>相对父对象</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span>localPosition<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p>世界坐标和相对坐标相同时的两种情况</p>\n<ol>\n<li>父对象的坐标是世界坐标原点(0,0,0)</li>\n<li>对象没有父对象</li>\n</ol>\n</li>\n<li><p>位置的赋值不能单独改变x,y,z的值，只能整体改变</p>\n</li>\n<li><p>对象当前的各朝向</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">API</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">this.transform.forward</td>\n<td align=\"center\">当前对象正方向</td>\n</tr>\n<tr>\n<td align=\"center\">this.transform.back</td>\n<td align=\"center\">当前对象后方向</td>\n</tr>\n<tr>\n<td align=\"center\">this.transform.up</td>\n<td align=\"center\">当前对象上方向</td>\n</tr>\n<tr>\n<td align=\"center\">this.transform.down</td>\n<td align=\"center\">当前对象下方向</td>\n</tr>\n<tr>\n<td align=\"center\">this.transform.right</td>\n<td align=\"center\">当前对象右方向</td>\n</tr>\n<tr>\n<td align=\"center\">this.transform.left</td>\n<td align=\"center\">当前对象右左方向</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>位移</p>\n<ul>\n<li><p>公式：路程 = 方向 * 速度 * 时间 </p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token comment\">//朝自身前方向移动</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span>position <span class=\"token operator\">+=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span>forward <span class=\"token operator\">*</span> Time<span class=\"token punctuation\">.</span>deltaTime <span class=\"token operator\">*</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n<li><p>API 一般使用该方式位移</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token comment\">//参数一：表示位移多少  路程=方向*速度*时间</span>\n<span class=\"token comment\">//参数二：表示相对坐标系 默认是localPosition</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span><span class=\"token function\">Translate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//朝自己的正方向移动</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span><span class=\"token function\">Translate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span>forward <span class=\"token operator\">*</span> <span class=\"token number\">1</span><span class=\"token operator\">*</span>Time<span class=\"token punctuation\">.</span>deltaTime<span class=\"token punctuation\">,</span> Space<span class=\"token punctuation\">.</span>World<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//朝世界的正方向移动</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span><span class=\"token function\">Translate</span><span class=\"token punctuation\">(</span>Vector3<span class=\"token punctuation\">.</span>forward <span class=\"token operator\">*</span> <span class=\"token number\">1</span> <span class=\"token operator\">*</span> Time<span class=\"token punctuation\">.</span>deltaTime<span class=\"token punctuation\">,</span> Space<span class=\"token punctuation\">.</span>World<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//朝自己的正方向移动</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span><span class=\"token function\">Translate</span><span class=\"token punctuation\">(</span>Vector3<span class=\"token punctuation\">.</span>forward <span class=\"token operator\">*</span> <span class=\"token number\">1</span> <span class=\"token operator\">*</span> Time<span class=\"token punctuation\">.</span>deltaTime<span class=\"token punctuation\">,</span> Space<span class=\"token punctuation\">.</span>Self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>角度和旋转</p>\n<ul>\n<li><p>自转 API</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token comment\">//第一个参数：每一帧旋转的角度</span>\n<span class=\"token comment\">//第二个参数：相对坐标系 默认是自己的坐标系</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span><span class=\"token function\">Rotate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Vector3</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> Time<span class=\"token punctuation\">.</span>deltaTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//重载方式</span>\n<span class=\"token comment\">//第一个参数：相对于哪个轴进行运动</span>\n<span class=\"token comment\">//第二个参数：转动的角度是多少</span>\n<span class=\"token comment\">//第三个参数：相对坐标系 默认是自己的坐标系</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span><span class=\"token function\">Rotate</span><span class=\"token punctuation\">(</span>Vector3<span class=\"token punctuation\">.</span>up<span class=\"token punctuation\">,</span> Time<span class=\"token punctuation\">.</span>deltaTime <span class=\"token operator\">*</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>Space<span class=\"token punctuation\">.</span>Self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>相对于某个点进行旋转</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token comment\">//第一个参数：相对于哪个点</span>\n<span class=\"token comment\">//第二个参数：相对于点的轴</span>\n<span class=\"token comment\">//第三个参数：转的度数 旋转速度*时间</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span><span class=\"token function\">RotateAround</span><span class=\"token punctuation\">(</span>Vector3<span class=\"token punctuation\">.</span>zero<span class=\"token punctuation\">,</span> Vector3<span class=\"token punctuation\">.</span>up<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span> <span class=\"token operator\">*</span> Time<span class=\"token punctuation\">.</span>deltaTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n</ul>\n<p>  :::danger<br>  通过欧拉角(Obj.transform.eulerAngles)获得的角度，在代码上始终只能在0~360范围内<br>  :::</p>\n<ul>\n<li><p>缩放和看向</p>\n</li>\n<li><p>父子关系</p>\n</li>\n<li><p>坐标转换</p>\n</li>\n</ul>\n","feature":true,"text":"场景中的对象 GameObject类对象是Unity引擎提供作为场景中所有对象的根本 Unity中脚本的基本规则 创建规则 不在VS中创建脚本 可以放在Assets文件夹下的任意位置（建议同一文件夹下） 类名和文件名必须一致，不然不能挂载（因为反射机制创建对象，会通过文件名去找T...","link":"","photos":[],"count_time":{"symbolsCount":"6.2k","symbolsTime":"6 mins."},"categories":[{"name":"Unity3D引擎","slug":"Unity3D引擎","count":1,"path":"api/categories/Unity3D引擎.json"}],"tags":[{"name":"Unity3D引擎","slug":"Unity3D引擎","count":1,"path":"api/tags/Unity3D引擎.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9C%BA%E6%99%AF%E4%B8%AD%E7%9A%84%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">场景中的对象</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Unity%E4%B8%AD%E8%84%9A%E6%9C%AC%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%A7%84%E5%88%99\"><span class=\"toc-text\">Unity中脚本的基本规则</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9C%A8Unity%E4%B8%AD%E6%89%93%E5%8D%B0%E4%BF%A1%E6%81%AF%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">在Unity中打印信息的两种方式</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">生命周期函数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Inspector%E7%AA%97%E5%8F%A3%E5%8F%AF%E7%BC%96%E8%BE%91%E7%9A%84%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">Inspector窗口可编辑的变量</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#MonoBehaviour%E4%B8%AD%E7%9A%84%E9%87%8D%E8%A6%81%E5%86%85%E5%AE%B9\"><span class=\"toc-text\">MonoBehaviour中的重要内容</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#GameObject%E5%B8%B8%E7%94%A8%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">GameObject常用成员变量</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#GameObject%E5%B8%B8%E7%94%A8%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">GameObject常用静态方法</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#GameObject%E5%B8%B8%E7%94%A8%E7%9A%84%E6%88%90%E5%91%98%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">GameObject常用的成员方法</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Unity%E4%B8%AD%E7%9A%84Object%E4%B8%8D%E6%98%AF%E6%8C%87%E7%9A%84%E4%B8%87%E7%89%A9%E4%B9%8B%E7%88%B6%E7%9A%84object\"><span class=\"toc-text\">Unity中的Object不是指的万物之父的object</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Time\"><span class=\"toc-text\">Time</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Transform\"><span class=\"toc-text\">Transform</span></a></li></ol>","author":{"name":"cBao","slug":"blog-author","avatar":"https://cbaoblog.oss-cn-shanghai.aliyuncs.com/HeadPortrait.jpg","link":"/","description":"但求日积月累，收获于细微。<br /><b>虚幻引擎开发</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"C#语法","uid":"710e93f12251a070d08d271cb7816514","slug":"CSharp语法","date":"2022-09-13T15:16:35.000Z","updated":"2022-09-24T16:16:19.808Z","comments":true,"path":"api/articles/CSharp语法.json","keywords":null,"cover":"https://cbaoblog.oss-cn-shanghai.aliyuncs.com/CSharp.png","text":"三种注释方法 双斜杠注释（//）：用于注释一行信息 星号注释（/**/）：用于注释多行信息 三斜杠注释（///）：用于注释类，命名空间等 提示 注释：Ctrl+K+C 取消注释：Ctrl+K+U 控制台的输入和输出 API 功能描述 Console.Write(); 在控制台输出...","link":"","photos":[],"count_time":{"symbolsCount":"31k","symbolsTime":"28 mins."},"categories":[{"name":"C#","slug":"C","count":1,"path":"api/categories/C.json"}],"tags":[{"name":"C#语法","slug":"C-语法","count":1,"path":"api/tags/C-语法.json"}],"author":{"name":"cBao","slug":"blog-author","avatar":"https://cbaoblog.oss-cn-shanghai.aliyuncs.com/HeadPortrait.jpg","link":"/","description":"但求日积月累，收获于细微。<br /><b>虚幻引擎开发</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}