{"title":"Unity3D引擎","uid":"2d7fcd3211374fac141da523879cb012","slug":"Unity3D引擎","date":"2022-09-22T15:48:50.000Z","updated":"2022-09-23T06:35:25.753Z","comments":true,"path":"api/articles/Unity3D引擎.json","keywords":null,"cover":"https://cbaoblog.oss-cn-shanghai.aliyuncs.com/UnityLogo.png","content":"<p>csdsd</p>\n<h2 id=\"场景中的对象\"><a href=\"#场景中的对象\" class=\"headerlink\" title=\"场景中的对象\"></a>场景中的对象</h2><ul>\n<li>GameObject类对象是Unity引擎提供作为场景中所有对象的根本</li>\n</ul>\n<h2 id=\"Unity中脚本的基本规则\"><a href=\"#Unity中脚本的基本规则\" class=\"headerlink\" title=\"Unity中脚本的基本规则\"></a>Unity中脚本的基本规则</h2><ul>\n<li>创建规则<ul>\n<li>不在VS中创建脚本</li>\n<li>可以放在Assets文件夹下的任意位置（建议同一文件夹下）</li>\n<li>类名和文件名必须一致，不然不能挂载（因为反射机制创建对象，会通过文件名去找Type） <strong>重要</strong></li>\n<li>不要使用中文命名</li>\n<li>没有特殊需求，不需要管命名空间</li>\n<li>创建的脚本默认继承MonoBehaviour</li>\n</ul>\n</li>\n<li>MonoBehavior基类<ul>\n<li>创建的脚本默认继承MonoBehaviour，继承该类才能挂载到GameObject上</li>\n<li>继承了MonoBehaviour的脚本不能new只能挂载！！！</li>\n<li>继承了MonoBehaviour的脚本不要写构造函数，因为不能new，构造函数无意义</li>\n<li>继承了MonoBehaviour的脚本可以在一个对象上挂多个（没有添加DisallowMultipleComponent特性时）</li>\n<li>继承MonoBehaviour的类也可以再次被继承，遵循面向对象继承多态原则</li>\n</ul>\n</li>\n<li>不继承MonoBehaviour的类<ul>\n<li>不继承MonoBehaviour的类不能挂载到GameObject对象上</li>\n<li>不继承MonoBehaviour的类 想怎么写就怎么写 如果要使用 需要自己new实例化一个对象</li>\n<li>不继承MonoBehaviour的类 一般是单例模式的类（用于管理模块）或者数据结构类（用于存储数据）</li>\n<li>不继承MonoBehaviour的类 不用保留默认出现的几个函数</li>\n</ul>\n</li>\n</ul>\n","feature":true,"text":"csdsd 场景中的对象 GameObject类对象是Unity引擎提供作为场景中所有对象的根本 Unity中脚本的基本规则 创建规则 不在VS中创建脚本 可以放在Assets文件夹下的任意位置（建议同一文件夹下） 类名和文件名必须一致，不然不能挂载（因为反射机制创建对象，会通过...","link":"","photos":[],"count_time":{"symbolsCount":638,"symbolsTime":"1 mins."},"categories":[{"name":"Unity3D引擎","slug":"Unity3D引擎","count":1,"path":"api/categories/Unity3D引擎.json"}],"tags":[{"name":"Unity3D引擎","slug":"Unity3D引擎","count":1,"path":"api/tags/Unity3D引擎.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9C%BA%E6%99%AF%E4%B8%AD%E7%9A%84%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">场景中的对象</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Unity%E4%B8%AD%E8%84%9A%E6%9C%AC%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%A7%84%E5%88%99\"><span class=\"toc-text\">Unity中脚本的基本规则</span></a></li></ol>","author":{"name":"cBao","slug":"blog-author","avatar":"https://cbaoblog.oss-cn-shanghai.aliyuncs.com/HeadPortrait.jpg","link":"/","description":"但求日积月累，收获于细微。<br /><b>虚幻引擎开发</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"C#语法","uid":"710e93f12251a070d08d271cb7816514","slug":"CSharp语法","date":"2022-09-13T15:16:35.000Z","updated":"2022-09-22T15:37:28.093Z","comments":true,"path":"api/articles/CSharp语法.json","keywords":null,"cover":"https://cbaoblog.oss-cn-shanghai.aliyuncs.com/CSharp.png","text":"三种注释方法 双斜杠注释（//）：用于注释一行信息 星号注释（/**/）：用于注释多行信息 三斜杠注释（///）：用于注释类，命名空间等 提示 注释：Ctrl+K+C 取消注释：Ctrl+K+U 控制台的输入和输出 API 功能描述 Console.Write(); 在控制台输出...","link":"","photos":[],"count_time":{"symbolsCount":"30k","symbolsTime":"28 mins."},"categories":[{"name":"C#","slug":"C","count":1,"path":"api/categories/C.json"}],"tags":[{"name":"C#语法","slug":"C-语法","count":1,"path":"api/tags/C-语法.json"}],"author":{"name":"cBao","slug":"blog-author","avatar":"https://cbaoblog.oss-cn-shanghai.aliyuncs.com/HeadPortrait.jpg","link":"/","description":"但求日积月累，收获于细微。<br /><b>虚幻引擎开发</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}