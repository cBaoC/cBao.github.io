{"title":"C++与Blueprint","uid":"bc6d1f69b0b25560b0e01f064311b126","slug":"C++与Blueprint","date":"2022-07-05T14:57:17.677Z","updated":"2022-07-05T14:57:35.313Z","comments":true,"path":"api/articles/C++与Blueprint.json","keywords":null,"cover":[],"content":"<h2 id=\"UCLASS-宏标记\"><a href=\"#UCLASS-宏标记\" class=\"headerlink\" title=\"UCLASS()宏标记\"></a>UCLASS()宏标记</h2><ul>\n<li><p>用于该类对象在蓝图中的操作</p>\n</li>\n<li><p>结构</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token function\">UCLASS</span><span class=\"token punctuation\">(</span>描述指令<span class=\"token punctuation\">,</span>描述指令<span class=\"token punctuation\">,</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p> <strong>BlueprintType</strong> :此类可以作为蓝图中的一种变量类型使用， <strong>类默认均可被蓝图访问</strong> ，一般我们用此标记描述结构体，提供给蓝图访问。</p>\n</li>\n<li><p> <strong>NotBlueprintType</strong> ：此类不可以作为蓝图中的一种变量类型使用。</p>\n</li>\n<li><p> <strong>Blueprintable</strong> :标明当前类 <strong>可被蓝图继承</strong> ，默认可被继承，标记关系向子类传递，子类可覆盖描述关系</p>\n</li>\n<li><p> <strong>NotBlueprintable</strong> :标明当前类 <strong>不可被蓝图继承</strong> ，默认可被继承，标记关系向子类传递，子类可覆盖描述关系</p>\n</li>\n</ul>\n<h2 id=\"UPROPERTY-宏标记\"><a href=\"#UPROPERTY-宏标记\" class=\"headerlink\" title=\"UPROPERTY()宏标记\"></a>UPROPERTY()宏标记</h2><ul>\n<li><p>用于将对象属性暴露到蓝图中操作</p>\n</li>\n<li><p>语法</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">UPROPERTY（标记，标记，<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>，meta（key<span class=\"token operator\">=</span>value，key<span class=\"token operator\">=</span>value，<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>））\n类型 参数名称<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n<li><p> <strong>BlueprintReadOnly</strong> ：标记属性在蓝图中是一个常量，只能读取无法进行操作</p>\n</li>\n<li><p> <strong>BlueprintReadWrite</strong> ：标记属性在蓝图中可以读取，也可以进行操作，不能时私有成员函数</p>\n</li>\n<li><p><strong>Category</strong> ：表明该属性在蓝图中的分类</p>\n<ul>\n<li> 可以使用 <strong>|</strong> 来划分分类级别</li>\n</ul>\n</li>\n<li><p> <strong>Config</strong> ：标记此属性可被存储到指定配置文件中，启动时属性内容从配置文件中获取</p>\n</li>\n<li><p> <strong>EditAnywhere</strong> ：该属性可在编辑器窗口中进行编辑也可在场景细节面板中编辑</p>\n</li>\n<li><p> <strong>EditDefaultsOnly</strong> ：该属性只可在蓝图编辑器窗口编辑，无法在场景细节面板中编辑</p>\n</li>\n<li><p> <strong>EditInstanceOnly</strong> ：该属性只能在实例中修改，不能在蓝图编辑器中修改</p>\n</li>\n<li><p> <strong>VisibleAnywhere</strong> ：表明属性可以在属性窗口可见（原型实例中均可看到），无法编辑</p>\n</li>\n<li><p>若标记的是组件指针，表示组件内容在细节面板中显示所有编辑项</p>\n</li>\n<li><p> <strong>VisibleDefaultsOnly</strong> ：属性仅能在蓝图编辑器窗口可见，无法编辑</p>\n</li>\n<li><p>若标记的是组件指针，则表示组件内容在细节面板中显示所有编辑项</p>\n</li>\n<li><p> <strong>VisibleInstanceOnly</strong> ：属性仅能在实例属性窗口中可见，无法编辑</p>\n</li>\n<li><p>若标记的是组件指针，则表示组件内容在细节面板中显示所有编辑项</p>\n</li>\n<li><p> <strong>EditFixedSize</strong> ：限定动态数组长度禁止在蓝图属性面板中被修改（单一添加无法显示，需配合上述标记才可显示）</p>\n</li>\n<li><p> <strong>AdvancedDisplay</strong> ：将属性隐藏到高级显示项中</p>\n</li>\n<li><p> <strong>meta别名标记</strong> ：将名称在编辑器或者细节面板中用别名代替原名</p>\n</li>\n</ul>\n  <pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">meta<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>DisplayName<span class=\"token operator\">=</span><span class=\"token string\">\"别名\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li> <strong>meta成员属性值域约束</strong> ：限定值在编辑器或者细节面板中的范围</li>\n</ul>\n  <pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">meta<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>UIMin<span class=\"token operator\">=</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">,</span>UIMax<span class=\"token operator\">=</span><span class=\"token string\">\"50\"</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//在编辑器UI上约束，直接填入不会被约束</span>\nmeta<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>ClampMin<span class=\"token operator\">=</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">,</span>ClampMax<span class=\"token operator\">=</span><span class=\"token string\">\"50\"</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//在编辑器上约束，直接填入也会被约束</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<ul>\n<li> <strong>meta成员属性修改状态约束</strong> ：用一个bool变量控制另一个变量是否能被修改</li>\n</ul>\n  <pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token function\">UPROPERTY</span><span class=\"token punctuation\">(</span>EditAnywhere<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">bool</span> bShow<span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">UPROPERTY</span><span class=\"token punctuation\">(</span>EditAnywhere<span class=\"token punctuation\">,</span>meta<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>EditCondition<span class=\"token operator\">=</span><span class=\"token string\">\"bShow\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nint32 Test<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li> <strong>meta修饰Transform和Location转换为小组件</strong></li>\n</ul>\n  <pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token function\">UPROPERTY</span><span class=\"token punctuation\">(</span>meta<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>MakeEditWidget<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"UFUNCTION-宏标记\"><a href=\"#UFUNCTION-宏标记\" class=\"headerlink\" title=\"UFUNCTION()宏标记\"></a>UFUNCTION()宏标记</h2><ul>\n<li><p>结构</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token function\">UFUNCTION</span><span class=\"token punctuation\">(</span>指令<span class=\"token punctuation\">,</span>指令<span class=\"token punctuation\">,</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span><span class=\"token function\">meta</span><span class=\"token punctuation\">(</span>key<span class=\"token operator\">=</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p> <strong>BlueprintCallable</strong> ：该函数在蓝图中可被调用（该类被蓝图继承后才可调用）</p>\n</li>\n<li><p>当函数参数是引用类型时，在蓝图中被当做输出针脚</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token function\">UFUNCTION</span><span class=\"token punctuation\">(</span>BlueprintCallable<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">cBaoTest</span><span class=\"token punctuation\">(</span>int32<span class=\"token operator\">&amp;</span> C<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://cbaoblog.oss-cn-shanghai.aliyuncs.com/img/Blueprint_1.png\"></p>\n</li>\n<li><p>当函数参数是const修饰的引用类型（或普通类型），在蓝图中被当做输入针脚</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token function\">UFUNCTION</span><span class=\"token punctuation\">(</span>BlueprintCallable<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">cBaoTest</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> int32<span class=\"token operator\">&amp;</span> C<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://cbaoblog.oss-cn-shanghai.aliyuncs.com/img/Blueprint_2.png\"></p>\n</li>\n<li><p><strong>Category</strong> ：标明此函数在蓝图中的分类</p>\n<ul>\n<li> 可以使用 <strong>|</strong> 来划分分类级别</li>\n</ul>\n</li>\n<li><p> <strong>BlueprintImplementableEvent</strong>：标记的函数只能在C++中调用，在蓝图中无法被调用 </p>\n</li>\n<li><p>在C++中构建声明，但定义在蓝图中定义，从而达到在C++中调用蓝图的目的，cpp中无需定义</p>\n</li>\n<li><p>类似纯虚函数，但在继承关系中蓝图不用必须重写此函数</p>\n</li>\n<li><p>当函数没有返回类型时，在蓝图中是Event事件</p>\n</li>\n</ul>\n  <pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token function\">UFUNCTION</span><span class=\"token punctuation\">(</span>BlueprintImplementableEvent<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">cBaoTest</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> int32<span class=\"token operator\">&amp;</span> C<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>  <img src=\"https://cbaoblog.oss-cn-shanghai.aliyuncs.com/img/Blueprint_3.png\"></p>\n","feature":true,"text":"UCLASS()宏标记 用于该类对象在蓝图中的操作 结构 UCLASS(描述指令,描述指令,...) BlueprintType :此类可以作为蓝图中的一种变量类型使用， 类默认均可被蓝图访问 ，一般我们用此标记描述结构体，提供给蓝图访问。 NotBlueprintType ：此...","link":"","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#UCLASS-%E5%AE%8F%E6%A0%87%E8%AE%B0\"><span class=\"toc-text\">UCLASS()宏标记</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#UPROPERTY-%E5%AE%8F%E6%A0%87%E8%AE%B0\"><span class=\"toc-text\">UPROPERTY()宏标记</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#UFUNCTION-%E5%AE%8F%E6%A0%87%E8%AE%B0\"><span class=\"toc-text\">UFUNCTION()宏标记</span></a></li></ol>","author":{"name":"cBao","slug":"blog-author","avatar":"https://cbaoblog.oss-cn-shanghai.aliyuncs.com/HeadPortrait.jpg","link":"/","description":"但求日积月累，收获于细微。<br /><b>虚幻引擎开发</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"VisualStudio常用操作","uid":"f58daaa95359f10d1d47b72330587f5d","slug":"Visual Studio常用操作","date":"2022-07-07T03:18:50.000Z","updated":"2022-07-07T14:20:29.014Z","comments":true,"path":"api/articles/Visual Studio常用操作.json","keywords":null,"cover":null,"text":"shfhsa Visual Studio中常用的快捷键 快捷键 功能 Ctrl + K, O 在头文件与源文件之间切换 Ctrl + K, C 注释选择行 Ctrl + K, U 取消选择行的注释 Ctrl + K, D 对齐所有代码 Ctrl+Shift+U 全部变为大写 Ct...","link":"","photos":[],"count_time":{"symbolsCount":233,"symbolsTime":"1 mins."},"categories":[{"name":"IDE","slug":"IDE","count":1,"path":"api/categories/IDE.json"}],"tags":[{"name":"Visual Studio","slug":"Visual-Studio","count":1,"path":"api/tags/Visual-Studio.json"}],"author":{"name":"cBao","slug":"blog-author","avatar":"https://cbaoblog.oss-cn-shanghai.aliyuncs.com/HeadPortrait.jpg","link":"/","description":"但求日积月累，收获于细微。<br /><b>虚幻引擎开发</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{}}