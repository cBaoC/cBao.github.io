{"title":"UE串口通信","uid":"32edd7bc4a69fac72c5e2e1809026b07","slug":"UE串口通信","date":"2022-07-22T08:14:36.000Z","updated":"2022-07-22T08:31:35.612Z","comments":true,"path":"api/articles/UE串口通信.json","keywords":null,"cover":"https://cbaoblog.oss-cn-shanghai.aliyuncs.com/UE5LOGO.png","content":"<p>sdasfsa</p>\n<h1 id=\"UE串口通信\"><a href=\"#UE串口通信\" class=\"headerlink\" title=\"UE串口通信\"></a>UE串口通信</h1><ul>\n<li><p>.h文件</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">once</span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">FC_DTRDSR</span>       <span class=\"token expression\"><span class=\"token number\">0x01</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">FC_RTSCTS</span>       <span class=\"token expression\"><span class=\"token number\">0x02</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">FC_XONXOFF</span>      <span class=\"token expression\"><span class=\"token number\">0x04</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">ASCII_BEL</span>       <span class=\"token expression\"><span class=\"token number\">0x07</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">ASCII_BS</span>        <span class=\"token expression\"><span class=\"token number\">0x08</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">ASCII_LF</span>        <span class=\"token expression\"><span class=\"token number\">0x0A</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">ASCII_CR</span>        <span class=\"token expression\"><span class=\"token number\">0x0D</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">ASCII_XON</span>       <span class=\"token expression\"><span class=\"token number\">0x11</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">ASCII_XOFF</span>      <span class=\"token expression\"><span class=\"token number\">0x13</span></span></span>\n\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"CoreMinimal.h\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"UObject/NoExportTypes.h\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"Serial.generated.h\"</span></span>\n\n<span class=\"token comment\">/**\n * \n */</span>\n\n <span class=\"token comment\">// Forward declaration</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_OVERLAPPED</span> OVERLAPPED<span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">UENUM</span><span class=\"token punctuation\">(</span>BlueprintType<span class=\"token punctuation\">,</span> Category <span class=\"token operator\">=</span> <span class=\"token string\">\"UE4Duino\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">enum</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ELineEnd</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token class-name\">uint8</span></span>\n<span class=\"token punctuation\">&#123;</span>\n\trn\t<span class=\"token function\">UMETA</span><span class=\"token punctuation\">(</span>DisplayName <span class=\"token operator\">=</span> <span class=\"token string\">\"\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\tn\t<span class=\"token function\">UMETA</span><span class=\"token punctuation\">(</span>DisplayName <span class=\"token operator\">=</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\tr\t<span class=\"token function\">UMETA</span><span class=\"token punctuation\">(</span>DisplayName <span class=\"token operator\">=</span> <span class=\"token string\">\"\\r\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\tnr\t<span class=\"token function\">UMETA</span><span class=\"token punctuation\">(</span>DisplayName <span class=\"token operator\">=</span> <span class=\"token string\">\"\\n\\r\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">UCLASS</span><span class=\"token punctuation\">(</span>BlueprintType<span class=\"token punctuation\">,</span> Category <span class=\"token operator\">=</span> <span class=\"token string\">\"UE4Duino\"</span><span class=\"token punctuation\">,</span> meta <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Keywords <span class=\"token operator\">=</span> <span class=\"token string\">\"com arduino serial\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">INKPROJECTION_API</span> USerial <span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> UObject\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token function\">GENERATED_BODY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token comment\">/** Determines the line ending used when writing lines to serial port with PrintLine. */</span>\n\t<span class=\"token function\">UPROPERTY</span><span class=\"token punctuation\">(</span>BlueprintReadWrite<span class=\"token punctuation\">,</span> Category <span class=\"token operator\">=</span> <span class=\"token string\">\"UE4Duino | String\"</span><span class=\"token punctuation\">)</span>\n\t\tELineEnd WriteLineEnd<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">USerial</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token operator\">~</span><span class=\"token function\">USerial</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">/**\n\t * Open a serial port and return the created Serial instance.\n\t * Don't forget to close the port before exiting the game.\n\t *\n\t * @param bOpened If the serial port was successfully opened.\n\t * @param Port The serial port to open.\n\t * @param BaudRate BaudRate to open the serial port with.\n\t * @return A Serial instance to work with the opened port.\n\t */</span>\n\t<span class=\"token function\">UFUNCTION</span><span class=\"token punctuation\">(</span>BlueprintCallable<span class=\"token punctuation\">,</span> meta <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>DisplayName <span class=\"token operator\">=</span> <span class=\"token string\">\"Open Serial Port\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Category <span class=\"token operator\">=</span> <span class=\"token string\">\"UE4Duino\"</span><span class=\"token punctuation\">,</span> meta <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Keywords <span class=\"token operator\">=</span> <span class=\"token string\">\"com arduino serial start\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">static</span> USerial<span class=\"token operator\">*</span> <span class=\"token function\">OpenComPort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span><span class=\"token operator\">&amp;</span> bOpened<span class=\"token punctuation\">,</span> int32 Port <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> int32 BaudRate <span class=\"token operator\">=</span> <span class=\"token number\">9600</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">/**\n\t * Utility function to convert 4 bytes into an Integer. If the input array's length is not 4, returns 0.\n\t *\n\t * @param Bytes A byte array with 4 values representing the integer in little-endian format.\n\t * @return The final integer value or 0 for an invalid array.\n\t */</span>\n\t<span class=\"token function\">UFUNCTION</span><span class=\"token punctuation\">(</span>BlueprintPure<span class=\"token punctuation\">,</span> meta <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>DisplayName <span class=\"token operator\">=</span> <span class=\"token string\">\"Bytes to Int\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Category <span class=\"token operator\">=</span> <span class=\"token string\">\"UE4Duino\"</span><span class=\"token punctuation\">,</span> meta <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Keywords <span class=\"token operator\">=</span> <span class=\"token string\">\"cast concatenate group bit bitwise\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">static</span> int32 <span class=\"token function\">BytesToInt</span><span class=\"token punctuation\">(</span>TArray<span class=\"token operator\">&lt;</span>uint8<span class=\"token operator\">></span> Bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">/**\n\t * Utility function to get the 4 bytes that make an integer.\n\t *\n\t * @param Int The integer value to be converted.\n\t * @return A byte array containing the 4 bytes that make the integer, starting from the least significant one (little endian).\n\t */</span>\n\t<span class=\"token function\">UFUNCTION</span><span class=\"token punctuation\">(</span>BlueprintPure<span class=\"token punctuation\">,</span> meta <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>DisplayName <span class=\"token operator\">=</span> <span class=\"token string\">\"Int to Bytes\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Category <span class=\"token operator\">=</span> <span class=\"token string\">\"UE4Duino\"</span><span class=\"token punctuation\">,</span> meta <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Keywords <span class=\"token operator\">=</span> <span class=\"token string\">\"cast separate bit bitwise\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">static</span> TArray<span class=\"token operator\">&lt;</span>uint8<span class=\"token operator\">></span> <span class=\"token function\">IntToBytes</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> int32<span class=\"token operator\">&amp;</span> Int<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">/**\n\t * Utility function to convert 4 bytes into a float. If the input array's length is not 4, returns 0.0.\n\t *\n\t * @param Bytes A byte array with 4 values representing the float in IEEE 754 standard format.\n\t * @return The final float value or 0.0 for an invalid array.\n\t */</span>\n\t<span class=\"token function\">UFUNCTION</span><span class=\"token punctuation\">(</span>BlueprintPure<span class=\"token punctuation\">,</span> meta <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>DisplayName <span class=\"token operator\">=</span> <span class=\"token string\">\"Bytes to Float\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Category <span class=\"token operator\">=</span> <span class=\"token string\">\"UE4Duino\"</span><span class=\"token punctuation\">,</span> meta <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Keywords <span class=\"token operator\">=</span> <span class=\"token string\">\"cast concatenate group bit bitwise\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">float</span> <span class=\"token function\">BytesToFloat</span><span class=\"token punctuation\">(</span>TArray<span class=\"token operator\">&lt;</span>uint8<span class=\"token operator\">></span> Bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">/**\n\t * Utility function to get the 4 bytes that make a float.\n\t *\n\t * @param Float The float value to be converted.\n\t * @return A byte array containing the 4 bytes that make the float, in IEEE 754 standard format.\n\t */</span>\n\t<span class=\"token function\">UFUNCTION</span><span class=\"token punctuation\">(</span>BlueprintPure<span class=\"token punctuation\">,</span> meta <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>DisplayName <span class=\"token operator\">=</span> <span class=\"token string\">\"Float to Bytes\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Category <span class=\"token operator\">=</span> <span class=\"token string\">\"UE4Duino\"</span><span class=\"token punctuation\">,</span> meta <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Keywords <span class=\"token operator\">=</span> <span class=\"token string\">\"cast separate bit bitwise\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">static</span> TArray<span class=\"token operator\">&lt;</span>uint8<span class=\"token operator\">></span> <span class=\"token function\">FloatToBytes</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span><span class=\"token operator\">&amp;</span> Float<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">/**\n\t * Open a serial port. Don't forget to close the port before exiting the game.\n\t * If this Serial instance has already an opened port,\n\t * return false and doesn't change the opened port number.\n\t *\n\t * @param Port The serial port to open.\n\t * @param BaudRate BaudRate to open the serial port with.\n\t * @return If the serial port was successfully opened.\n\t */</span>\n\t<span class=\"token function\">UFUNCTION</span><span class=\"token punctuation\">(</span>BlueprintCallable<span class=\"token punctuation\">,</span> meta <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>DisplayName <span class=\"token operator\">=</span> <span class=\"token string\">\"Open Port\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Category <span class=\"token operator\">=</span> <span class=\"token string\">\"UE4Duino\"</span><span class=\"token punctuation\">,</span> meta <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Keywords <span class=\"token operator\">=</span> <span class=\"token string\">\"com start init\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">bool</span> <span class=\"token function\">Open</span><span class=\"token punctuation\">(</span>int32 Port <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> int32 BaudRate <span class=\"token operator\">=</span> <span class=\"token number\">9600</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">/**\n\t * Close and end the communication with the serial port. If not open, do nothing.\n\t */</span>\n\t<span class=\"token function\">UFUNCTION</span><span class=\"token punctuation\">(</span>BlueprintCallable<span class=\"token punctuation\">,</span> meta <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>DisplayName <span class=\"token operator\">=</span> <span class=\"token string\">\"Close Port\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Category <span class=\"token operator\">=</span> <span class=\"token string\">\"UE4Duino\"</span><span class=\"token punctuation\">,</span> meta <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Keywords <span class=\"token operator\">=</span> <span class=\"token string\">\"com end finish release\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">/**\n\t * Will read characters from Serial port until \\0 (null char) is found or there are no\n\t * characters left to read.\n\t *\n\t * @param bSuccess If there was anything to read.\n\t * @return The read string\n\t */</span>\n\t<span class=\"token function\">UFUNCTION</span><span class=\"token punctuation\">(</span>BlueprintCallable<span class=\"token punctuation\">,</span> meta <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>DisplayName <span class=\"token operator\">=</span> <span class=\"token string\">\"Read String\"</span><span class=\"token punctuation\">,</span> keywords <span class=\"token operator\">=</span> <span class=\"token string\">\"get read receive string words text characters\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Category <span class=\"token operator\">=</span> <span class=\"token string\">\"UE4Duino\"</span><span class=\"token punctuation\">)</span>\n\t\tFString <span class=\"token function\">ReadString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span><span class=\"token operator\">&amp;</span> bSuccess<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">/**\n\t * Will read characters from Serial port until \\r\\n (Arduino println line end) is found.\n\t *\n\t * @param bSuccess If there was anything to read.\n\t * @return The read string\n\t */</span>\n\t<span class=\"token function\">UFUNCTION</span><span class=\"token punctuation\">(</span>BlueprintCallable<span class=\"token punctuation\">,</span> meta <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>DisplayName <span class=\"token operator\">=</span> <span class=\"token string\">\"Read Line\"</span><span class=\"token punctuation\">,</span> keywords <span class=\"token operator\">=</span> <span class=\"token string\">\"get read receive string words text characters\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Category <span class=\"token operator\">=</span> <span class=\"token string\">\"UE4Duino\"</span><span class=\"token punctuation\">)</span>\n\t\tFString <span class=\"token function\">Readln</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span><span class=\"token operator\">&amp;</span> bSuccess<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">/**\n\t * Reads the string until a specific char is met.\n\t * The Terminator char won't be included in the result string.\n\t */</span>\n\t <span class=\"token comment\">//UFUNCTION(BlueprintCallable, meta = (DisplayName = \"Read String Until\", keywords = \"get read receive string words text characters\"), Category = \"UE4Duino\")</span>\n\tFString <span class=\"token function\">ReadStringUntil</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span><span class=\"token operator\">&amp;</span> bSuccess<span class=\"token punctuation\">,</span> uint8 Terminator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">/**\n\t * Reads a float from the serial port (sent as 4 bytes).\n\t * @param bSuccess True if there were 4 bytes to read.\n\t * @return The read value\n\t */</span>\n\t<span class=\"token function\">UFUNCTION</span><span class=\"token punctuation\">(</span>BlueprintCallable<span class=\"token punctuation\">,</span> meta <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>DisplayName <span class=\"token operator\">=</span> <span class=\"token string\">\"Read a Float\"</span><span class=\"token punctuation\">,</span> keywords <span class=\"token operator\">=</span> <span class=\"token string\">\"get read receive\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Category <span class=\"token operator\">=</span> <span class=\"token string\">\"UE4Duino\"</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">float</span> <span class=\"token function\">ReadFloat</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span><span class=\"token operator\">&amp;</span> bSuccess<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">/**\n\t * Reads an integer from the serial port (sent as 4 bytes).\n\t * @param bSuccess True if there were 4 bytes to read.\n\t * @return The read value\n\t */</span>\n\t<span class=\"token function\">UFUNCTION</span><span class=\"token punctuation\">(</span>BlueprintCallable<span class=\"token punctuation\">,</span> meta <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>DisplayName <span class=\"token operator\">=</span> <span class=\"token string\">\"Read an Int\"</span><span class=\"token punctuation\">,</span> keywords <span class=\"token operator\">=</span> <span class=\"token string\">\"get read receive integer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Category <span class=\"token operator\">=</span> <span class=\"token string\">\"UE4Duino\"</span><span class=\"token punctuation\">)</span>\n\t\tint32 <span class=\"token function\">ReadInt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span><span class=\"token operator\">&amp;</span> bSuccess<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">/**\n\t * Reads a byte from the serial port.\n\t * @param bSuccess True if there were 4 bytes to read.\n\t * @return The read value\n\t */</span>\n\t<span class=\"token function\">UFUNCTION</span><span class=\"token punctuation\">(</span>BlueprintCallable<span class=\"token punctuation\">,</span> meta <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>DisplayName <span class=\"token operator\">=</span> <span class=\"token string\">\"Read a Byte\"</span><span class=\"token punctuation\">,</span> keywords <span class=\"token operator\">=</span> <span class=\"token string\">\"get read receive\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Category <span class=\"token operator\">=</span> <span class=\"token string\">\"UE4Duino\"</span><span class=\"token punctuation\">)</span>\n\t\tuint8 <span class=\"token function\">ReadByte</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span><span class=\"token operator\">&amp;</span> bSuccess<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">/**\n\t * Reads up to Limit bytes from the serial port. If there are less than Limit,\n\t * reads all of them and return True.\n\t * @param bSuccess True if there was at least 1 byte to read.\n\t * @return An array containing the read bytes\n\t */</span>\n\t<span class=\"token function\">UFUNCTION</span><span class=\"token punctuation\">(</span>BlueprintCallable<span class=\"token punctuation\">,</span> meta <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>DisplayName <span class=\"token operator\">=</span> <span class=\"token string\">\"Read Bytes\"</span><span class=\"token punctuation\">,</span> keywords <span class=\"token operator\">=</span> <span class=\"token string\">\"get read receive\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Category <span class=\"token operator\">=</span> <span class=\"token string\">\"UE4Duino\"</span><span class=\"token punctuation\">)</span>\n\t\tTArray<span class=\"token operator\">&lt;</span>uint8<span class=\"token operator\">></span> <span class=\"token function\">ReadBytes</span><span class=\"token punctuation\">(</span>int32 Limit <span class=\"token operator\">=</span> <span class=\"token number\">256</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">/**\n\t * Writes a string without newline to the serial port.\n\t * @param String The string to be sent to the serial port.\n\t * @return True if the string was sent.\n\t */</span>\n\t<span class=\"token function\">UFUNCTION</span><span class=\"token punctuation\">(</span>BlueprintCallable<span class=\"token punctuation\">,</span> meta <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>DisplayName <span class=\"token operator\">=</span> <span class=\"token string\">\"Print\"</span><span class=\"token punctuation\">,</span> keywords <span class=\"token operator\">=</span> <span class=\"token string\">\"send write string words text characters\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Category <span class=\"token operator\">=</span> <span class=\"token string\">\"UE4Duino\"</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">bool</span> <span class=\"token function\">Print</span><span class=\"token punctuation\">(</span>FString String<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">/**\n\t * Writes a string with newline (\\n) appended at the end to the serial port.\n\t * @param String The string to be sent to the serial port.\n\t * @return True if the string was sent.\n\t */</span>\n\t<span class=\"token function\">UFUNCTION</span><span class=\"token punctuation\">(</span>BlueprintCallable<span class=\"token punctuation\">,</span> meta <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>DisplayName <span class=\"token operator\">=</span> <span class=\"token string\">\"Print Line\"</span><span class=\"token punctuation\">,</span> keywords <span class=\"token operator\">=</span> <span class=\"token string\">\"send write string words text characters\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Category <span class=\"token operator\">=</span> <span class=\"token string\">\"UE4Duino\"</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">bool</span> <span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>FString String<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">/**\n\t * Writes a float value to the serial port as 4 bytes.\n\t * @param Value The value to be sent to the serial port.\n\t * @return True if the bytes were sent.\n\t */</span>\n\t<span class=\"token function\">UFUNCTION</span><span class=\"token punctuation\">(</span>BlueprintCallable<span class=\"token punctuation\">,</span> meta <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>DisplayName <span class=\"token operator\">=</span> <span class=\"token string\">\"Write a Float\"</span><span class=\"token punctuation\">,</span> keywords <span class=\"token operator\">=</span> <span class=\"token string\">\"send\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Category <span class=\"token operator\">=</span> <span class=\"token string\">\"UE4Duino\"</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">bool</span> <span class=\"token function\">WriteFloat</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> Value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">/**\n\t * Writes an integer value to the serial port as 4 bytes.\n\t * @param Value The value to be sent to the serial port.\n\t * @return True if the bytes were sent.\n\t */</span>\n\t<span class=\"token function\">UFUNCTION</span><span class=\"token punctuation\">(</span>BlueprintCallable<span class=\"token punctuation\">,</span> meta <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>DisplayName <span class=\"token operator\">=</span> <span class=\"token string\">\"Write an Int\"</span><span class=\"token punctuation\">,</span> keywords <span class=\"token operator\">=</span> <span class=\"token string\">\"integer send\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Category <span class=\"token operator\">=</span> <span class=\"token string\">\"UE4Duino\"</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">bool</span> <span class=\"token function\">WriteInt</span><span class=\"token punctuation\">(</span>int32 Value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">/**\n\t * Writes a byte value to the serial port.\n\t * @param Value The value to be sent to the serial port.\n\t * @return True if the byte was sent.\n\t */</span>\n\t<span class=\"token function\">UFUNCTION</span><span class=\"token punctuation\">(</span>BlueprintCallable<span class=\"token punctuation\">,</span> meta <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>DisplayName <span class=\"token operator\">=</span> <span class=\"token string\">\"Write a Byte\"</span><span class=\"token punctuation\">,</span> keywords <span class=\"token operator\">=</span> <span class=\"token string\">\"send\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Category <span class=\"token operator\">=</span> <span class=\"token string\">\"UE4Duino\"</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">bool</span> <span class=\"token function\">WriteByte</span><span class=\"token punctuation\">(</span>uint8 Value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">/**\n\t * Writes a byte array as a sequence of bytes to the serial port.\n\t * @param Buffer The byte array to be sent to the serial port.\n\t * @return True if the bytes were sent.\n\t */</span>\n\t<span class=\"token function\">UFUNCTION</span><span class=\"token punctuation\">(</span>BlueprintCallable<span class=\"token punctuation\">,</span> meta <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>DisplayName <span class=\"token operator\">=</span> <span class=\"token string\">\"Write Bytes\"</span><span class=\"token punctuation\">,</span> keywords <span class=\"token operator\">=</span> <span class=\"token string\">\"send\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Category <span class=\"token operator\">=</span> <span class=\"token string\">\"UE4Duino\"</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">bool</span> <span class=\"token function\">WriteBytes</span><span class=\"token punctuation\">(</span>TArray<span class=\"token operator\">&lt;</span>uint8<span class=\"token operator\">></span> Buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">/** Clean the serial port by reading everything left to be read. */</span>\n\t<span class=\"token function\">UFUNCTION</span><span class=\"token punctuation\">(</span>BlueprintCallable<span class=\"token punctuation\">,</span> meta <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>DisplayName <span class=\"token operator\">=</span> <span class=\"token string\">\"Flush Port\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Category <span class=\"token operator\">=</span> <span class=\"token string\">\"UE4Duino\"</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">Flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">/**\n\t * Check if the serial port is open.\n\t * @return True if the serial port is open.\n\t */</span>\n\t<span class=\"token function\">UFUNCTION</span><span class=\"token punctuation\">(</span>BlueprintPure<span class=\"token punctuation\">,</span> meta <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>DisplayName <span class=\"token operator\">=</span> <span class=\"token string\">\"Is Port Open\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Category <span class=\"token operator\">=</span> <span class=\"token string\">\"UE4Duino\"</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">bool</span> <span class=\"token function\">IsOpened</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> m_hIDComDev <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">/**\n\t * Read the number of the serial port selected for this Serial instance.\n\t * @return The number of the serial port.\n\t */</span>\n\t<span class=\"token function\">UFUNCTION</span><span class=\"token punctuation\">(</span>BlueprintPure<span class=\"token punctuation\">,</span> meta <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>DisplayName <span class=\"token operator\">=</span> <span class=\"token string\">\"Get Port Number\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Category <span class=\"token operator\">=</span> <span class=\"token string\">\"UE4Duino\"</span><span class=\"token punctuation\">)</span>\n\t\tint32 <span class=\"token function\">GetPort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> m_Port<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">/**\n\t * Read the selected BaudRate for this Serial instance.\n\t * @return The baud rate.\n\t */</span>\n\t<span class=\"token function\">UFUNCTION</span><span class=\"token punctuation\">(</span>BlueprintPure<span class=\"token punctuation\">,</span> meta <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>DisplayName <span class=\"token operator\">=</span> <span class=\"token string\">\"Get Baud Rate\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Category <span class=\"token operator\">=</span> <span class=\"token string\">\"UE4Duino\"</span><span class=\"token punctuation\">)</span>\n\t\tint32 <span class=\"token function\">GetBaud</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> m_Baud<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">/**\n\t * Converts a LineEnd enum value to String.\n\t * @param LineEnd LineEnd enum value.\n\t * @return The LineEnd value in string format.\n\t */</span>\n\t<span class=\"token function\">UFUNCTION</span><span class=\"token punctuation\">(</span>BlueprintCallable<span class=\"token punctuation\">,</span> meta <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>DisplayName <span class=\"token operator\">=</span> <span class=\"token string\">\"Line End to String\"</span><span class=\"token punctuation\">,</span> keywords <span class=\"token operator\">=</span> <span class=\"token string\">\"cast convert\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Category <span class=\"token operator\">=</span> <span class=\"token string\">\"UE4Duino\"</span><span class=\"token punctuation\">)</span>\n\t\tFString <span class=\"token function\">LineEndToStr</span><span class=\"token punctuation\">(</span>ELineEnd LineEnd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">void</span><span class=\"token operator\">*</span> m_hIDComDev<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// These are pointers to be able to use OVERLAPPED with forward declaration</span>\n\tOVERLAPPED<span class=\"token operator\">*</span> m_OverlappedRead<span class=\"token punctuation\">;</span>\n\tOVERLAPPED<span class=\"token operator\">*</span> m_OverlappedWrite<span class=\"token punctuation\">;</span>\n\n\tint32 m_Port<span class=\"token punctuation\">;</span>\n\tint32 m_Baud<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>.cpp文件</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// Fill out your copyright notice in the Description page of Project Settings.</span>\n\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"Serial.h\"</span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"Windows/AllowWindowsPlatformTypes.h\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"Windows/MinWindows.h\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"Windows/HideWindowsPlatformTypes.h\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;cmath></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;cstring></span></span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">BOOL2bool</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>B<span class=\"token punctuation\">)</span> B <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token boolean\">false</span> <span class=\"token operator\">:</span> <span class=\"token boolean\">true</span></span></span>\n\nUSerial<span class=\"token operator\">*</span> <span class=\"token class-name\">USerial</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">OpenComPort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span><span class=\"token operator\">&amp;</span> bOpened<span class=\"token punctuation\">,</span> int32 Port<span class=\"token punctuation\">,</span> int32 BaudRate<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\tUSerial<span class=\"token operator\">*</span> Serial <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">NewObject</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>USerial<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tbOpened <span class=\"token operator\">=</span> Serial<span class=\"token operator\">-></span><span class=\"token function\">Open</span><span class=\"token punctuation\">(</span>Port<span class=\"token punctuation\">,</span> BaudRate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> Serial<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nint32 <span class=\"token class-name\">USerial</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">BytesToInt</span><span class=\"token punctuation\">(</span>TArray<span class=\"token operator\">&lt;</span>uint8<span class=\"token operator\">></span> Bytes<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Bytes<span class=\"token punctuation\">.</span><span class=\"token function\">Num</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token generic-function\"><span class=\"token function\">reinterpret_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>int32<span class=\"token operator\">*</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>Bytes<span class=\"token punctuation\">.</span><span class=\"token function\">GetData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nTArray<span class=\"token operator\">&lt;</span>uint8<span class=\"token operator\">></span> <span class=\"token class-name\">USerial</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">IntToBytes</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> int32<span class=\"token operator\">&amp;</span> Int<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\tTArray<span class=\"token operator\">&lt;</span>uint8<span class=\"token operator\">></span> Bytes<span class=\"token punctuation\">;</span>\n\tBytes<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token generic-function\"><span class=\"token function\">reinterpret_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">const</span> uint8<span class=\"token operator\">*</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>Int<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> Bytes<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">float</span> <span class=\"token class-name\">USerial</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">BytesToFloat</span><span class=\"token punctuation\">(</span>TArray<span class=\"token operator\">&lt;</span>uint8<span class=\"token operator\">></span> Bytes<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Bytes<span class=\"token punctuation\">.</span><span class=\"token function\">Num</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token generic-function\"><span class=\"token function\">reinterpret_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">*</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>Bytes<span class=\"token punctuation\">.</span><span class=\"token function\">GetData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nTArray<span class=\"token operator\">&lt;</span>uint8<span class=\"token operator\">></span> <span class=\"token class-name\">USerial</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">FloatToBytes</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span><span class=\"token operator\">&amp;</span> Float<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\tTArray<span class=\"token operator\">&lt;</span>uint8<span class=\"token operator\">></span> Bytes<span class=\"token punctuation\">;</span>\n\tBytes<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token generic-function\"><span class=\"token function\">reinterpret_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">const</span> uint8<span class=\"token operator\">*</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>Float<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> Bytes<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token class-name\">USerial</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">USerial</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token operator\">:</span> <span class=\"token function\">WriteLineEnd</span><span class=\"token punctuation\">(</span>ELineEnd<span class=\"token double-colon punctuation\">::</span>n<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">,</span> <span class=\"token function\">m_hIDComDev</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">,</span> <span class=\"token function\">m_OverlappedRead</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">,</span> <span class=\"token function\">m_OverlappedWrite</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">,</span> <span class=\"token function\">m_Port</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">,</span> <span class=\"token function\">m_Baud</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">// Allocate the OVERLAPPED structs</span>\n\tm_OverlappedRead <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">OVERLAPPED</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tm_OverlappedWrite <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">OVERLAPPED</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token class-name\">FMemory</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Memset</span><span class=\"token punctuation\">(</span>m_OverlappedRead<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>OVERLAPPED<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">FMemory</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Memset</span><span class=\"token punctuation\">(</span>m_OverlappedWrite<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>OVERLAPPED<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token class-name\">USerial</span><span class=\"token double-colon punctuation\">::</span><span class=\"token operator\">~</span><span class=\"token function\">USerial</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Delete allocated OVERLAPPED structs</span>\n\t<span class=\"token keyword\">delete</span> m_OverlappedRead<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">delete</span> m_OverlappedWrite<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">bool</span> <span class=\"token class-name\">USerial</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Open</span><span class=\"token punctuation\">(</span>int32 nPort<span class=\"token punctuation\">,</span> int32 nBaud<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nPort <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">UE_LOG</span><span class=\"token punctuation\">(</span>LogTemp<span class=\"token punctuation\">,</span> Error<span class=\"token punctuation\">,</span> <span class=\"token function\">TEXT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Invalid port number: %d\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> nPort<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_hIDComDev<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">UE_LOG</span><span class=\"token punctuation\">(</span>LogTemp<span class=\"token punctuation\">,</span> Warning<span class=\"token punctuation\">,</span> <span class=\"token function\">TEXT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Trying to use opened Serial instance to open a new one. \"</span>\n\t\t\t<span class=\"token string\">\"Current open instance port: %d | Port tried: %d\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> m_Port<span class=\"token punctuation\">,</span> nPort<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\tFString szPort<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nPort <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n\t\tszPort <span class=\"token operator\">=</span> <span class=\"token class-name\">FString</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token function\">TEXT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"COM%d\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> nPort<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">else</span>\n\t\tszPort <span class=\"token operator\">=</span> <span class=\"token class-name\">FString</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token function\">TEXT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\\\\\\\.\\\\COM%d\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> nPort<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tDCB dcb<span class=\"token punctuation\">;</span>\n\n\tm_hIDComDev <span class=\"token operator\">=</span> <span class=\"token function\">CreateFile</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>szPort<span class=\"token punctuation\">,</span> GENERIC_READ <span class=\"token operator\">|</span> GENERIC_WRITE<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> OPEN_EXISTING<span class=\"token punctuation\">,</span> FILE_ATTRIBUTE_NORMAL <span class=\"token operator\">|</span> FILE_FLAG_OVERLAPPED<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_hIDComDev <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> dwError <span class=\"token operator\">=</span> <span class=\"token function\">GetLastError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">UE_LOG</span><span class=\"token punctuation\">(</span>LogTemp<span class=\"token punctuation\">,</span> Error<span class=\"token punctuation\">,</span> <span class=\"token function\">TEXT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Failed to open port COM%d (%s). Error: %08X\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> nPort<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>szPort<span class=\"token punctuation\">,</span> dwError<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token class-name\">FMemory</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Memset</span><span class=\"token punctuation\">(</span>m_OverlappedRead<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>OVERLAPPED<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">FMemory</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Memset</span><span class=\"token punctuation\">(</span>m_OverlappedWrite<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>OVERLAPPED<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tCOMMTIMEOUTS CommTimeOuts<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//CommTimeOuts.ReadIntervalTimeout = 10;</span>\n\tCommTimeOuts<span class=\"token punctuation\">.</span>ReadIntervalTimeout <span class=\"token operator\">=</span> <span class=\"token number\">0xFFFFFFFF</span><span class=\"token punctuation\">;</span>\n\tCommTimeOuts<span class=\"token punctuation\">.</span>ReadTotalTimeoutMultiplier <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\tCommTimeOuts<span class=\"token punctuation\">.</span>ReadTotalTimeoutConstant <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\tCommTimeOuts<span class=\"token punctuation\">.</span>WriteTotalTimeoutMultiplier <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\tCommTimeOuts<span class=\"token punctuation\">.</span>WriteTotalTimeoutConstant <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">SetCommTimeouts</span><span class=\"token punctuation\">(</span>m_hIDComDev<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>CommTimeOuts<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tm_OverlappedRead<span class=\"token operator\">-></span>hEvent <span class=\"token operator\">=</span> <span class=\"token function\">CreateEvent</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tm_OverlappedWrite<span class=\"token operator\">-></span>hEvent <span class=\"token operator\">=</span> <span class=\"token function\">CreateEvent</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tdcb<span class=\"token punctuation\">.</span>DCBlength <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>DCB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">GetCommState</span><span class=\"token punctuation\">(</span>m_hIDComDev<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>dcb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tdcb<span class=\"token punctuation\">.</span>BaudRate <span class=\"token operator\">=</span> nBaud<span class=\"token punctuation\">;</span>\n\tdcb<span class=\"token punctuation\">.</span>ByteSize <span class=\"token operator\">=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">SetCommState</span><span class=\"token punctuation\">(</span>m_hIDComDev<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>dcb<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n\t\t<span class=\"token operator\">!</span><span class=\"token function\">SetupComm</span><span class=\"token punctuation\">(</span>m_hIDComDev<span class=\"token punctuation\">,</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n\t\tm_OverlappedRead<span class=\"token operator\">-></span>hEvent <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span> <span class=\"token operator\">||</span>\n\t\tm_OverlappedWrite<span class=\"token operator\">-></span>hEvent <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> dwError <span class=\"token operator\">=</span> <span class=\"token function\">GetLastError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_OverlappedRead<span class=\"token operator\">-></span>hEvent <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token function\">CloseHandle</span><span class=\"token punctuation\">(</span>m_OverlappedRead<span class=\"token operator\">-></span>hEvent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_OverlappedWrite<span class=\"token operator\">-></span>hEvent <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token function\">CloseHandle</span><span class=\"token punctuation\">(</span>m_OverlappedWrite<span class=\"token operator\">-></span>hEvent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">CloseHandle</span><span class=\"token punctuation\">(</span>m_hIDComDev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tm_hIDComDev <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">UE_LOG</span><span class=\"token punctuation\">(</span>LogTemp<span class=\"token punctuation\">,</span> Error<span class=\"token punctuation\">,</span> <span class=\"token function\">TEXT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Failed to setup port COM%d. Error: %08X\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> nPort<span class=\"token punctuation\">,</span> dwError<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">//FPlatformProcess::Sleep(0.05f);</span>\n\t<span class=\"token function\">AddToRoot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tm_Port <span class=\"token operator\">=</span> nPort<span class=\"token punctuation\">;</span>\n\tm_Baud <span class=\"token operator\">=</span> nBaud<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">USerial</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>m_hIDComDev<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_OverlappedRead<span class=\"token operator\">-></span>hEvent <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token function\">CloseHandle</span><span class=\"token punctuation\">(</span>m_OverlappedRead<span class=\"token operator\">-></span>hEvent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_OverlappedWrite<span class=\"token operator\">-></span>hEvent <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token function\">CloseHandle</span><span class=\"token punctuation\">(</span>m_OverlappedWrite<span class=\"token operator\">-></span>hEvent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">CloseHandle</span><span class=\"token punctuation\">(</span>m_hIDComDev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tm_hIDComDev <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">RemoveFromRoot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nFString <span class=\"token class-name\">USerial</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">ReadString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span><span class=\"token operator\">&amp;</span> bSuccess<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">ReadStringUntil</span><span class=\"token punctuation\">(</span>bSuccess<span class=\"token punctuation\">,</span> <span class=\"token char\">'\\0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nFString <span class=\"token class-name\">USerial</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Readln</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span><span class=\"token operator\">&amp;</span> bSuccess<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">ReadStringUntil</span><span class=\"token punctuation\">(</span>bSuccess<span class=\"token punctuation\">,</span> <span class=\"token char\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nFString <span class=\"token class-name\">USerial</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">ReadStringUntil</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span><span class=\"token operator\">&amp;</span> bSuccess<span class=\"token punctuation\">,</span> uint8 Terminator<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\tbSuccess <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>m_hIDComDev<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">TEXT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tTArray<span class=\"token operator\">&lt;</span>uint8<span class=\"token operator\">></span> Chars<span class=\"token punctuation\">;</span>\n\tuint8 Byte <span class=\"token operator\">=</span> <span class=\"token number\">0x0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">bool</span> bReadStatus<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> dwBytesRead<span class=\"token punctuation\">,</span> dwErrorFlags<span class=\"token punctuation\">;</span>\n\tCOMSTAT ComStat<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">ClearCommError</span><span class=\"token punctuation\">(</span>m_hIDComDev<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>dwErrorFlags<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>ComStat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>ComStat<span class=\"token punctuation\">.</span>cbInQue<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">TEXT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">do</span> <span class=\"token punctuation\">&#123;</span>\n\t\tbReadStatus <span class=\"token operator\">=</span> <span class=\"token function\">BOOL2bool</span><span class=\"token punctuation\">(</span><span class=\"token function\">ReadFile</span><span class=\"token punctuation\">(</span>\n\t\t\tm_hIDComDev<span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token operator\">&amp;</span>Byte<span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token operator\">&amp;</span>dwBytesRead<span class=\"token punctuation\">,</span>\n\t\t\tm_OverlappedRead<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>bReadStatus<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">GetLastError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> ERROR_IO_PENDING<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t\t<span class=\"token function\">WaitForSingleObject</span><span class=\"token punctuation\">(</span>m_OverlappedRead<span class=\"token operator\">-></span>hEvent<span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token keyword\">else</span>\n\t\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t\tChars<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Byte <span class=\"token operator\">==</span> Terminator <span class=\"token operator\">||</span> dwBytesRead <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token comment\">// when Terminator is \\n, we know we're expecting lines from Arduino. But those</span>\n\t\t\t<span class=\"token comment\">// are ended in \\r\\n. That means that if we found the line Terminator (\\n), our previous</span>\n\t\t\t<span class=\"token comment\">// character could be \\r. If it is, we remove that from the array.</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Chars<span class=\"token punctuation\">.</span><span class=\"token function\">Num</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> Terminator <span class=\"token operator\">==</span> <span class=\"token char\">'\\n'</span> <span class=\"token operator\">&amp;&amp;</span> Chars<span class=\"token punctuation\">.</span><span class=\"token function\">Top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token char\">'\\r'</span><span class=\"token punctuation\">)</span> Chars<span class=\"token punctuation\">.</span><span class=\"token function\">Pop</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\tChars<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">else</span> Chars<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>Byte<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>Byte <span class=\"token operator\">!=</span> <span class=\"token number\">0x0</span> <span class=\"token operator\">&amp;&amp;</span> Byte <span class=\"token operator\">!=</span> Terminator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tbSuccess <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">auto</span> Convert <span class=\"token operator\">=</span> <span class=\"token function\">FUTF8ToTCHAR</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ANSICHAR<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>Chars<span class=\"token punctuation\">.</span><span class=\"token function\">GetData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">FString</span><span class=\"token punctuation\">(</span>Convert<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">float</span> <span class=\"token class-name\">USerial</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">ReadFloat</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span><span class=\"token operator\">&amp;</span> bSuccess<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\tbSuccess <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n\tTArray<span class=\"token operator\">&lt;</span>uint8<span class=\"token operator\">></span> Bytes <span class=\"token operator\">=</span> <span class=\"token function\">ReadBytes</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Bytes<span class=\"token punctuation\">.</span><span class=\"token function\">Num</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\tbSuccess <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token generic-function\"><span class=\"token function\">reinterpret_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">*</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>Bytes<span class=\"token punctuation\">.</span><span class=\"token function\">GetData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nint32 <span class=\"token class-name\">USerial</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">ReadInt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span><span class=\"token operator\">&amp;</span> bSuccess<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\tbSuccess <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n\tTArray<span class=\"token operator\">&lt;</span>uint8<span class=\"token operator\">></span> Bytes <span class=\"token operator\">=</span> <span class=\"token function\">ReadBytes</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Bytes<span class=\"token punctuation\">.</span><span class=\"token function\">Num</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\tbSuccess <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token generic-function\"><span class=\"token function\">reinterpret_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>int32<span class=\"token operator\">*</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>Bytes<span class=\"token punctuation\">.</span><span class=\"token function\">GetData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nuint8 <span class=\"token class-name\">USerial</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">ReadByte</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span><span class=\"token operator\">&amp;</span> bSuccess<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\tbSuccess <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>m_hIDComDev<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0x0</span><span class=\"token punctuation\">;</span>\n\n\tuint8 Byte <span class=\"token operator\">=</span> <span class=\"token number\">0x0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">bool</span> bReadStatus<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> dwBytesRead<span class=\"token punctuation\">,</span> dwErrorFlags<span class=\"token punctuation\">;</span>\n\tCOMSTAT ComStat<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">ClearCommError</span><span class=\"token punctuation\">(</span>m_hIDComDev<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>dwErrorFlags<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>ComStat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>ComStat<span class=\"token punctuation\">.</span>cbInQue<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0x0</span><span class=\"token punctuation\">;</span>\n\n\tbReadStatus <span class=\"token operator\">=</span> <span class=\"token function\">BOOL2bool</span><span class=\"token punctuation\">(</span><span class=\"token function\">ReadFile</span><span class=\"token punctuation\">(</span>\n\t\tm_hIDComDev<span class=\"token punctuation\">,</span>\n\t\t<span class=\"token operator\">&amp;</span>Byte<span class=\"token punctuation\">,</span>\n\t\t<span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token operator\">&amp;</span>dwBytesRead<span class=\"token punctuation\">,</span>\n\t\tm_OverlappedRead<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>bReadStatus<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">GetLastError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> ERROR_IO_PENDING<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token function\">WaitForSingleObject</span><span class=\"token punctuation\">(</span>m_OverlappedRead<span class=\"token operator\">-></span>hEvent<span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">else</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0x0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\tbSuccess <span class=\"token operator\">=</span> dwBytesRead <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> Byte<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nTArray<span class=\"token operator\">&lt;</span>uint8<span class=\"token operator\">></span> <span class=\"token class-name\">USerial</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">ReadBytes</span><span class=\"token punctuation\">(</span>int32 Limit<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\tTArray<span class=\"token operator\">&lt;</span>uint8<span class=\"token operator\">></span> Data<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>m_hIDComDev<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> Data<span class=\"token punctuation\">;</span>\n\n\tData<span class=\"token punctuation\">.</span><span class=\"token function\">Empty</span><span class=\"token punctuation\">(</span>Limit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tuint8<span class=\"token operator\">*</span> Buffer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> uint8<span class=\"token punctuation\">[</span>Limit<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">bool</span> bReadStatus<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> dwBytesRead<span class=\"token punctuation\">,</span> dwErrorFlags<span class=\"token punctuation\">;</span>\n\tCOMSTAT ComStat<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">ClearCommError</span><span class=\"token punctuation\">(</span>m_hIDComDev<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>dwErrorFlags<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>ComStat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>ComStat<span class=\"token punctuation\">.</span>cbInQue<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> Data<span class=\"token punctuation\">;</span>\n\n\tbReadStatus <span class=\"token operator\">=</span> <span class=\"token function\">BOOL2bool</span><span class=\"token punctuation\">(</span><span class=\"token function\">ReadFile</span><span class=\"token punctuation\">(</span>\n\t\tm_hIDComDev<span class=\"token punctuation\">,</span>\n\t\tBuffer<span class=\"token punctuation\">,</span>\n\t\tLimit<span class=\"token punctuation\">,</span>\n\t\t<span class=\"token operator\">&amp;</span>dwBytesRead<span class=\"token punctuation\">,</span>\n\t\tm_OverlappedRead<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>bReadStatus<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">GetLastError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> ERROR_IO_PENDING<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token function\">WaitForSingleObject</span><span class=\"token punctuation\">(</span>m_OverlappedRead<span class=\"token operator\">-></span>hEvent<span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">else</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">return</span> Data<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\tData<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span>Buffer<span class=\"token punctuation\">,</span> dwBytesRead<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> Data<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">bool</span> <span class=\"token class-name\">USerial</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Print</span><span class=\"token punctuation\">(</span>FString String<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">auto</span> Convert <span class=\"token operator\">=</span> <span class=\"token function\">FTCHARToUTF8</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>String<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tTArray<span class=\"token operator\">&lt;</span>uint8<span class=\"token operator\">></span> Data<span class=\"token punctuation\">;</span>\n\tData<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>uint8<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>Convert<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Convert<span class=\"token punctuation\">.</span><span class=\"token function\">Length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">WriteBytes</span><span class=\"token punctuation\">(</span>Data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">bool</span> <span class=\"token class-name\">USerial</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>FString String<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">Print</span><span class=\"token punctuation\">(</span>String <span class=\"token operator\">+</span> <span class=\"token function\">LineEndToStr</span><span class=\"token punctuation\">(</span>WriteLineEnd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">bool</span> <span class=\"token class-name\">USerial</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">WriteFloat</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> Value<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\tTArray<span class=\"token operator\">&lt;</span>uint8<span class=\"token operator\">></span> Buffer<span class=\"token punctuation\">;</span>\n\tBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token generic-function\"><span class=\"token function\">reinterpret_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>uint8<span class=\"token operator\">*</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>Value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">WriteBytes</span><span class=\"token punctuation\">(</span>Buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">bool</span> <span class=\"token class-name\">USerial</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">WriteInt</span><span class=\"token punctuation\">(</span>int32 Value<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\tTArray<span class=\"token operator\">&lt;</span>uint8<span class=\"token operator\">></span> Buffer<span class=\"token punctuation\">;</span>\n\tBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token generic-function\"><span class=\"token function\">reinterpret_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>uint8<span class=\"token operator\">*</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>Value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">WriteBytes</span><span class=\"token punctuation\">(</span>Buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">bool</span> <span class=\"token class-name\">USerial</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">WriteByte</span><span class=\"token punctuation\">(</span>uint8 Value<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\tTArray<span class=\"token operator\">&lt;</span>uint8<span class=\"token operator\">></span> <span class=\"token function\">Buffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> Value <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">WriteBytes</span><span class=\"token punctuation\">(</span>Buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">bool</span> <span class=\"token class-name\">USerial</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">WriteBytes</span><span class=\"token punctuation\">(</span>TArray<span class=\"token operator\">&lt;</span>uint8<span class=\"token operator\">></span> Buffer<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>m_hIDComDev<span class=\"token punctuation\">)</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">bool</span> bWriteStat<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> dwBytesWritten<span class=\"token punctuation\">;</span>\n\n\tbWriteStat <span class=\"token operator\">=</span> <span class=\"token function\">BOOL2bool</span><span class=\"token punctuation\">(</span><span class=\"token function\">WriteFile</span><span class=\"token punctuation\">(</span>m_hIDComDev<span class=\"token punctuation\">,</span> Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">GetData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">Num</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>dwBytesWritten<span class=\"token punctuation\">,</span> m_OverlappedWrite<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>bWriteStat <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token function\">GetLastError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> ERROR_IO_PENDING<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">WaitForSingleObject</span><span class=\"token punctuation\">(</span>m_OverlappedWrite<span class=\"token operator\">-></span>hEvent<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\tdwBytesWritten <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">else</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token function\">GetOverlappedResult</span><span class=\"token punctuation\">(</span>m_hIDComDev<span class=\"token punctuation\">,</span> m_OverlappedWrite<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>dwBytesWritten<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tm_OverlappedWrite<span class=\"token operator\">-></span>Offset <span class=\"token operator\">+=</span> dwBytesWritten<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token class-name\">USerial</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">Flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>m_hIDComDev<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n\tTArray<span class=\"token operator\">&lt;</span>uint8<span class=\"token operator\">></span> Data<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">do</span> <span class=\"token punctuation\">&#123;</span>\n\t\tData <span class=\"token operator\">=</span> <span class=\"token function\">ReadBytes</span><span class=\"token punctuation\">(</span><span class=\"token number\">8192</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>Data<span class=\"token punctuation\">.</span><span class=\"token function\">Num</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nFString <span class=\"token class-name\">USerial</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">LineEndToStr</span><span class=\"token punctuation\">(</span>ELineEnd LineEnd<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>LineEnd<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">case</span> ELineEnd<span class=\"token double-colon punctuation\">::</span>rn<span class=\"token operator\">:</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">TEXT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">case</span> ELineEnd<span class=\"token double-colon punctuation\">::</span>n<span class=\"token operator\">:</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">TEXT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">case</span> ELineEnd<span class=\"token double-colon punctuation\">::</span>r<span class=\"token operator\">:</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">TEXT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\r\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">case</span> ELineEnd<span class=\"token double-colon punctuation\">::</span>nr<span class=\"token operator\">:</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">TEXT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\\r\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">TEXT</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"null\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>蓝图使用<br><img src=\"https://cbaoblog.oss-cn-shanghai.aliyuncs.com/img/ChuanKou.png\" alt=\"ChuanKou\"></p>\n</li>\n<li><p>蓝图代码连接<br><a href=\"https://blueprintue.com/blueprint/ss-s-s83/\">https://blueprintue.com/blueprint/ss-s-s83/</a></p>\n</li>\n</ul>\n","text":"sdasfsa UE串口通信 .h文件 #pragma once #define FC_DTRDSR 0x01 #define FC_RTSCTS 0x02 #define FC_XONXOFF 0x04 #define ASCII_BEL 0x07 #define ASCII_...","link":"","photos":[],"count_time":{"symbolsCount":"20k","symbolsTime":"18 mins."},"categories":[{"name":"UnrealEngine","slug":"UnrealEngine","count":3,"path":"api/categories/UnrealEngine.json"}],"tags":[{"name":"串口通信","slug":"串口通信","count":1,"path":"api/tags/串口通信.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#UE%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1\"><span class=\"toc-text\">UE串口通信</span></a></li></ol>","author":{"name":"cBao","slug":"blog-author","avatar":"https://cbaoblog.oss-cn-shanghai.aliyuncs.com/HeadPortrait.jpg","link":"/","description":"但求日积月累，收获于细微。<br /><b>虚幻引擎开发</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Json","uid":"ae911ea8c615446cd5e6fd02771c3f77","slug":"Json","date":"2022-08-02T06:17:49.000Z","updated":"2022-08-02T14:01:10.895Z","comments":true,"path":"api/articles/Json.json","keywords":null,"cover":"https://cbaoblog.oss-cn-shanghai.aliyuncs.com/Json_LOGO.png","text":"JSON 语法规则 数据在键/值对中 数据由逗号 , 分隔 使用斜杆来转义 \\ 字符 大括号 {} 保存对象 中括号 [] 保存数组，数组可以包含多个对象 JSON 键值对JSON 数据的书写格式是： \"name\" : \"cBao\" JSON 值可以是 数字（整数或浮点数） \"a...","link":"","photos":[],"count_time":{"symbolsCount":"4.5k","symbolsTime":"4 mins."},"categories":[{"name":"Json","slug":"Json","count":1,"path":"api/categories/Json.json"}],"tags":[{"name":"Json","slug":"Json","count":1,"path":"api/tags/Json.json"}],"author":{"name":"cBao","slug":"blog-author","avatar":"https://cbaoblog.oss-cn-shanghai.aliyuncs.com/HeadPortrait.jpg","link":"/","description":"但求日积月累，收获于细微。<br /><b>虚幻引擎开发</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"C++仿函数和代理","uid":"650e8b54c427468049a9eded7ddf3373","slug":"C++仿函数和代理","date":"2022-07-17T07:19:09.000Z","updated":"2022-07-17T07:47:09.174Z","comments":true,"path":"api/articles/C++仿函数和代理.json","keywords":null,"cover":"https://cbaoblog.oss-cn-shanghai.aliyuncs.com/C%2B%2B.png","text":"sjdks 仿函数 提示 需要头文件#include &lt; functional &gt; 仿函数与普通函数#include &lt;iostream> #include &lt;functional> int Test(int A, int B) &#123; std::c...","link":"","photos":[],"count_time":{"symbolsCount":565,"symbolsTime":"1 mins."},"categories":[{"name":"C++","slug":"C","count":1,"path":"api/categories/C.json"}],"tags":[{"name":"仿函数和代理","slug":"仿函数和代理","count":1,"path":"api/tags/仿函数和代理.json"}],"author":{"name":"cBao","slug":"blog-author","avatar":"https://cbaoblog.oss-cn-shanghai.aliyuncs.com/HeadPortrait.jpg","link":"/","description":"但求日积月累，收获于细微。<br /><b>虚幻引擎开发</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}