{"title":"C#语法","uid":"710e93f12251a070d08d271cb7816514","slug":"CSharp语法","date":"2022-09-13T15:16:35.000Z","updated":"2022-09-24T16:16:19.808Z","comments":true,"path":"api/articles/CSharp语法.json","keywords":null,"cover":"https://cbaoblog.oss-cn-shanghai.aliyuncs.com/CSharp.png","content":"<h2 id=\"三种注释方法\"><a href=\"#三种注释方法\" class=\"headerlink\" title=\"三种注释方法\"></a>三种注释方法</h2><ul>\n<li>双斜杠注释（//）：用于注释一行信息</li>\n<li>星号注释（/**/）：用于注释多行信息</li>\n<li>三斜杠注释（///）：用于注释类，命名空间等</li>\n</ul>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">提示</p>\n<p>注释：Ctrl+K+C  取消注释：Ctrl+K+U</p>\n</div>\n<h2 id=\"控制台的输入和输出\"><a href=\"#控制台的输入和输出\" class=\"headerlink\" title=\"控制台的输入和输出\"></a>控制台的输入和输出</h2><table>\n<thead>\n<tr>\n<th align=\"center\">API</th>\n<th align=\"center\">功能描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">Console.Write();</td>\n<td align=\"center\">在控制台输出不会自动换行</td>\n</tr>\n<tr>\n<td align=\"center\">Console.WriteLine();</td>\n<td align=\"center\">在控制台输出会自动换行</td>\n</tr>\n<tr>\n<td align=\"center\">Console.ReadLine();</td>\n<td align=\"center\">等待用户输入一行，按回车键结束输入</td>\n</tr>\n<tr>\n<td align=\"center\">Console.ReadKey();</td>\n<td align=\"center\">只要用户按下任意键就结束</td>\n</tr>\n</tbody></table>\n<h2 id=\"折叠代码块\"><a href=\"#折叠代码块\" class=\"headerlink\" title=\"折叠代码块\"></a>折叠代码块</h2><pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token comment\">//用于整理代码，方便阅读，只在编辑时有效</span>\n<span class=\"token preprocessor property\">#<span class=\"token directive keyword\">region</span> </span><span class=\"token return-type class-name\">cBaoTest</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"折叠代码块\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token preprocessor property\">#<span class=\"token directive keyword\">endregion</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"变量类型\"><a href=\"#变量类型\" class=\"headerlink\" title=\"变量类型\"></a>变量类型</h2><table>\n<thead>\n<tr>\n<th align=\"left\">类型</th>\n<th align=\"center\">描述</th>\n<th align=\"center\">范围</th>\n<th align=\"center\">默认值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">bool</td>\n<td align=\"center\">布尔值</td>\n<td align=\"center\">True 或 False</td>\n<td align=\"center\">False</td>\n</tr>\n<tr>\n<td align=\"left\">byte</td>\n<td align=\"center\">8 位无符号整数</td>\n<td align=\"center\">0 到 255</td>\n<td align=\"center\">0</td>\n</tr>\n<tr>\n<td align=\"left\">char</td>\n<td align=\"center\">16 位 Unicode 字符</td>\n<td align=\"center\">U +0000 到 U +ffff</td>\n<td align=\"center\">‘\\0’</td>\n</tr>\n<tr>\n<td align=\"left\">decimal</td>\n<td align=\"center\">128 位精确的十进制值，28-29 有效位数</td>\n<td align=\"center\">(-7.9 x 1028 到 7.9 x 1028) / 100 到 28</td>\n<td align=\"center\">0.0M</td>\n</tr>\n<tr>\n<td align=\"left\">double</td>\n<td align=\"center\">64 位双精度浮点型</td>\n<td align=\"center\">(+/-)5.0 x 10-324 到 (+/-)1.7 x 10308</td>\n<td align=\"center\">0.0D</td>\n</tr>\n<tr>\n<td align=\"left\">float</td>\n<td align=\"center\">32 位单精度浮点型</td>\n<td align=\"center\">-3.4 x 1038 到 + 3.4 x 1038</td>\n<td align=\"center\">0.0F</td>\n</tr>\n<tr>\n<td align=\"left\">int</td>\n<td align=\"center\">32 位有符号整数类型</td>\n<td align=\"center\">-2,147,483,648 到 2,147,483,647</td>\n<td align=\"center\">0</td>\n</tr>\n<tr>\n<td align=\"left\">long</td>\n<td align=\"center\">64 位有符号整数类型</td>\n<td align=\"center\">-9,223,372,036,854,775,808 到 9,223,372,036,854,775,807</td>\n<td align=\"center\">0L</td>\n</tr>\n<tr>\n<td align=\"left\">sbyte</td>\n<td align=\"center\">8 位有符号整数类型</td>\n<td align=\"center\">-128 到 127</td>\n<td align=\"center\">0</td>\n</tr>\n<tr>\n<td align=\"left\">short</td>\n<td align=\"center\">16 位有符号整数类型</td>\n<td align=\"center\">-32,768 到 32,767</td>\n<td align=\"center\">0</td>\n</tr>\n<tr>\n<td align=\"left\">uint</td>\n<td align=\"center\">32 位无符号整数类型</td>\n<td align=\"center\">0 到 4,294,967,295</td>\n<td align=\"center\">0</td>\n</tr>\n<tr>\n<td align=\"left\">ulong</td>\n<td align=\"center\">64 位无符号整数类型</td>\n<td align=\"center\">0 到 18,446,744,073,709,551,615</td>\n<td align=\"center\">0</td>\n</tr>\n<tr>\n<td align=\"left\">ushort</td>\n<td align=\"center\">16 位无符号整数类型</td>\n<td align=\"center\">0 到 65,535</td>\n<td align=\"center\">0</td>\n</tr>\n</tbody></table>\n<h2 id=\"四种类型转换方式\"><a href=\"#四种类型转换方式\" class=\"headerlink\" title=\"四种类型转换方式\"></a>四种类型转换方式</h2><ul>\n<li><p>括号强转</p>\n<ul>\n<li>用于将大范围数转换成小范围数，不安全转换</li>\n<li>bool和string类型不支持该强转</li>\n</ul>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">sbyte</span></span> s1<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sbyte</span><span class=\"token punctuation\">)</span>i<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n<li><p>Parse转换</p>\n<ul>\n<li>将字符串转换为对应类型，安全转换</li>\n</ul>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> TestInt <span class=\"token operator\">=</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1234\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p>Convert转换</p>\n<ul>\n<li>各个类型之间的转换</li>\n</ul>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">float</span></span> f1 <span class=\"token operator\">=</span> <span class=\"token number\">3.4f</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> Convert<span class=\"token punctuation\">.</span><span class=\"token function\">ToInt32</span><span class=\"token punctuation\">(</span>f1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n<li><p>ToString转换</p>\n<ul>\n<li>其它类型转成string类型</li>\n</ul>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">float</span></span> f1 <span class=\"token operator\">=</span> <span class=\"token number\">3.4f</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">string</span></span> s1 <span class=\"token operator\">=</span> f1<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"异常捕获\"><a href=\"#异常捕获\" class=\"headerlink\" title=\"异常捕获\"></a>异常捕获</h2><pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> s1 <span class=\"token operator\">=</span> <span class=\"token string\">\"请输入语文成绩:\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//try尝试捕获错误</span>\n    <span class=\"token keyword\">try</span>\n    <span class=\"token punctuation\">&#123;</span>\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        YuWen <span class=\"token operator\">=</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span>Console<span class=\"token punctuation\">.</span><span class=\"token function\">ReadLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//若try中有错误将执行catch中代码</span>\n    <span class=\"token keyword\">catch</span>\n    <span class=\"token punctuation\">&#123;</span>\n        s1 <span class=\"token operator\">=</span> <span class=\"token string\">\"输入不合法，请重新输入语文成绩:\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"字符串拼接方式\"><a href=\"#字符串拼接方式\" class=\"headerlink\" title=\"字符串拼接方式\"></a>字符串拼接方式</h2><ul>\n<li><p>使用+号</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token comment\">//+号两边必须要有一个string类型</span>\n<span class=\"token class-name\"><span class=\"token keyword\">string</span></span> s1<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\ns1 <span class=\"token operator\">+=</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//结果是6</span>\ns1 <span class=\"token operator\">+=</span><span class=\"token string\">\" \"</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//结果是123，从第一个字符串类型之后都会自动调用ToString之后在进行拼接</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>使用string.Format()</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token comment\">//拼接的内容用占位符代替，数字0~n</span>\n<span class=\"token comment\">//内容不能少于占位符</span>\n<span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">Format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&#123;0&#125;,&#123;1&#125;\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"cBao\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"nice\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"位运算\"><a href=\"#位运算\" class=\"headerlink\" title=\"位运算\"></a>位运算</h2><ul>\n<li>二进制按位进行运算</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">位运算符</th>\n<th align=\"center\">介绍</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">按位与 &amp;</td>\n<td align=\"center\">有0则0</td>\n</tr>\n<tr>\n<td align=\"center\">按位或 |</td>\n<td align=\"center\">有1则1</td>\n</tr>\n<tr>\n<td align=\"center\">按位异或 ^</td>\n<td align=\"center\">相同为0，不同为1</td>\n</tr>\n<tr>\n<td align=\"center\">按位取反 ~</td>\n<td align=\"center\">0变1，1变0</td>\n</tr>\n<tr>\n<td align=\"center\">左移 &lt;&lt;</td>\n<td align=\"center\">左移几位，右边加几个0</td>\n</tr>\n<tr>\n<td align=\"center\">右移 &gt;&gt;</td>\n<td align=\"center\">右移几位，右侧去掉几个数</td>\n</tr>\n</tbody></table>\n<h2 id=\"控制台控制方法\"><a href=\"#控制台控制方法\" class=\"headerlink\" title=\"控制台控制方法\"></a>控制台控制方法</h2><ul>\n<li><p>清空</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\">Console<span class=\"token punctuation\">.</span><span class=\"token function\">Clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p>设置窗口大小，屏幕缓冲区大小</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\">Console<span class=\"token punctuation\">.</span><span class=\"token function\">SetWindowSize</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">SetBufferSize</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n</ul>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">提示</p>\n<ol>\n<li>先设置窗口大小，在设置屏幕缓冲区大小</li>\n<li>屏幕缓冲区大小不能小于窗口大小</li>\n<li>窗口大小不能大于控制台最大尺寸</li>\n</ol>\n\n</div>\n<ul>\n<li><p>设置光标位置</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\">Console<span class=\"token punctuation\">.</span><span class=\"token function\">SetCursorPosition</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">提示</p>\n<p><p>x和y的单位不同，1y=2x 视觉上</p>\n</p>\n</div>\n<ul>\n<li><p>控制台颜色</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token comment\">//文字颜色</span>\nConsole<span class=\"token punctuation\">.</span>ForegroundColor <span class=\"token operator\">=</span> ConsoleColor<span class=\"token punctuation\">.</span>Red<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//背景颜色</span>\n Console<span class=\"token punctuation\">.</span>BackgroundColor <span class=\"token operator\">=</span> ConsoleColor<span class=\"token punctuation\">.</span>Blue<span class=\"token punctuation\">;</span>\n Console<span class=\"token punctuation\">.</span><span class=\"token function\">Clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//设置背景颜色后必须用Clear一次</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>光标显示隐藏</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\">Console<span class=\"token punctuation\">.</span>CursorVisible <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span>CursorVisible <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n<li><p>关闭控制台</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\">Environment<span class=\"token punctuation\">.</span><span class=\"token function\">Exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//在调试状态下无效</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p>判断控制台当前有没有输入</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\">Console<span class=\"token punctuation\">.</span>KeyAvailable<span class=\"token comment\">//会减慢循环的执行速度</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"随机数\"><a href=\"#随机数\" class=\"headerlink\" title=\"随机数\"></a>随机数</h2><ul>\n<li><p>固定写法</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"> <span class=\"token comment\">//创建随机数对象</span>\n <span class=\"token class-name\">Random</span> r <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token comment\">//0~99的随机数</span>\n <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">Next</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token comment\">//生成一个大于0的随机数</span>\n <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i2 <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">Next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>i2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//生成一个大于等于8小于13的一个随机数</span>\n <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i3 <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">Next</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>i3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h2><ul>\n<li><p>数组的声明方式</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token comment\">//第一种</span>\n<span class=\"token class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> Arr<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//第二种</span>\n<span class=\"token class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> Arr_2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">int</span></span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//第三种</span>\n<span class=\"token class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> Arr_3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">int</span></span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//第四种</span>\n<span class=\"token class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> Arr_4 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//第五种</span>\n<span class=\"token class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> Arr_5 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>二维数组</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token comment\">//声明一个2行3列的二维数组</span>\n<span class=\"token class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">]</span></span> Arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">int</span></span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//获得行数</span>\n<span class=\"token class-name\"><span class=\"token keyword\">int</span></span> x<span class=\"token operator\">=</span>Arr<span class=\"token punctuation\">.</span><span class=\"token function\">GetLength</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//获得列数</span>\n<span class=\"token class-name\"><span class=\"token keyword\">int</span></span> y<span class=\"token operator\">=</span>Arr<span class=\"token punctuation\">.</span><span class=\"token function\">GetLength</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"值类型和引用类型\"><a href=\"#值类型和引用类型\" class=\"headerlink\" title=\"值类型和引用类型\"></a>值类型和引用类型</h2><p>值类型：基本变量类型，结构体，存储在栈空间，由计算机管理（它变我不变）</p>\n<p>引用类型：string（特殊，更像值类型）,数组，类，存储在堆空间，由程序员进行管理（它变我也变(用new可解除)）</p>\n<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><ul>\n<li>写在class或者struct中</li>\n</ul>\n<h2 id=\"表达式体方法\"><a href=\"#表达式体方法\" class=\"headerlink\" title=\"表达式体方法\"></a>表达式体方法</h2><ul>\n<li><p>执行一行代码的函数可以使用的一个功能</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token comment\">//表达式体方法</span>\n<span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">MyFun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ccc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"ref和out\"><a href=\"#ref和out\" class=\"headerlink\" title=\"ref和out\"></a>ref和out</h2><ul>\n<li><p>用于函数重载时ref和out不能同时修饰同一变量</p>\n</li>\n<li><p>ref类似C++中的引用，传入的变量必须初始化，可以不在内部赋值</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> A<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    A <span class=\"token operator\">=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">int</span></span> A <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//初始化</span>\n<span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//A被改成30</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>out与ref功能一样，但是传入的变量不必初始化，必须在内部赋值</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">out</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> A<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    A <span class=\"token operator\">=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">int</span></span> A<span class=\"token punctuation\">;</span><span class=\"token comment\">//不必初始化</span>\n<span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">out</span> A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//A被改成30</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"变长参数\"><a href=\"#变长参数\" class=\"headerlink\" title=\"变长参数\"></a>变长参数</h2><ul>\n<li><p>关键字：params</p>\n</li>\n<li><p>一个函数中只能有一个变长参数，且必须在最后一个参数</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> <span class=\"token function\">ParamSum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">params</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> Arr<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> Sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> Arr<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#123;</span>\n    Sum <span class=\"token operator\">+=</span> Arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> Sum<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"函数重载\"><a href=\"#函数重载\" class=\"headerlink\" title=\"函数重载\"></a>函数重载</h2><ul>\n<li>与C++函数重载类似</li>\n</ul>\n<h2 id=\"递归函数\"><a href=\"#递归函数\" class=\"headerlink\" title=\"递归函数\"></a>递归函数</h2><ul>\n<li>自己调用自己的函数</li>\n<li>必须要有能结束函数调用的条件</li>\n</ul>\n<h2 id=\"结构体\"><a href=\"#结构体\" class=\"headerlink\" title=\"结构体\"></a>结构体</h2><ul>\n<li><p>一般写在namespace中</p>\n</li>\n<li><p>结构体中声明的变量<strong>不能直接初始化</strong></p>\n</li>\n<li><p>在结构体中函数不需要添加static关键字</p>\n</li>\n<li><p>结构体不存在继承关系，但是可以继承接口</p>\n</li>\n<li><p>结构体构造函数</p>\n<ul>\n<li>没有返回值</li>\n<li>必须有参数</li>\n<li>函数名与结构体名相同</li>\n<li>必须在其中对所有变量数据初始化</li>\n</ul>\n</li>\n<li><p><strong>C#中struct默认访问修饰符是private</strong></p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">cBao</span>\n<span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> Name<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> Age<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> Number<span class=\"token punctuation\">;</span>\n\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">PrintfName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>Name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h2><ul>\n<li><p>冒泡排序</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token comment\">//升序</span>\n<span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">BubbleSortUp</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> Arr<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> x <span class=\"token operator\">&lt;</span> Arr<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span> x<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> y <span class=\"token operator\">&lt;</span> Arr<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token operator\">-</span>x<span class=\"token punctuation\">;</span> y<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Arr<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> Arr<span class=\"token punctuation\">[</span>y <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> Temp <span class=\"token operator\">=</span> Arr<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                Arr<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Arr<span class=\"token punctuation\">[</span>y <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                Arr<span class=\"token punctuation\">[</span>y <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Temp<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//降序</span>\n<span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">BubbleSortDown</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> Arr<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> x <span class=\"token operator\">&lt;</span> Arr<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span> x<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> y <span class=\"token operator\">&lt;</span> Arr<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token operator\">-</span>x<span class=\"token punctuation\">;</span> y<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Arr<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> Arr<span class=\"token punctuation\">[</span>y <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> Temp <span class=\"token operator\">=</span> Arr<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                Arr<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Arr<span class=\"token punctuation\">[</span>y <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                Arr<span class=\"token punctuation\">[</span>y <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Temp<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//优化版</span>\n<span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">BubbleSortUp</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> Arr<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n\n            <span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> isSort <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> x <span class=\"token operator\">&lt;</span> Arr<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span> x<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> y <span class=\"token operator\">&lt;</span> Arr<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token operator\">-</span>x<span class=\"token punctuation\">;</span> y<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Arr<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> Arr<span class=\"token punctuation\">[</span>y <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">&#123;</span>\n                        isSort <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> Temp <span class=\"token operator\">=</span> Arr<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                        Arr<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Arr<span class=\"token punctuation\">[</span>y <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                        Arr<span class=\"token punctuation\">[</span>y <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Temp<span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isSort<span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"类和对象\"><a href=\"#类和对象\" class=\"headerlink\" title=\"类和对象\"></a>类和对象</h2><ul>\n<li>一般声明在namespace中</li>\n<li>类是一个引用类型</li>\n<li><strong>不能在类中实例化一个相同类型的变量</strong></li>\n<li>访问修饰符与C++类似</li>\n<li>构造函数规则与C++类似</li>\n<li>析构函数（Unity中基本不会使用），C#中存在自动垃圾回收机制GC一般也不使用</li>\n</ul>\n<h2 id=\"垃圾回收机制\"><a href=\"#垃圾回收机制\" class=\"headerlink\" title=\"垃圾回收机制\"></a>垃圾回收机制</h2><ul>\n<li><p>GC只负责堆（Heap）内存的垃圾回收</p>\n</li>\n<li><p>引用类型都是存在于堆（Heap）中</p>\n</li>\n<li><p>手动触发垃圾回收方法</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\">GC<span class=\"token punctuation\">.</span><span class=\"token function\">Collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"成员属性\"><a href=\"#成员属性\" class=\"headerlink\" title=\"成员属性\"></a>成员属性</h2><ul>\n<li><p>用于保护成员变量</p>\n</li>\n<li><p>为成员属性的获取和赋值添加逻辑处理</p>\n</li>\n<li><p>get和set的访问权限不能高于或者等于外部访问权限</p>\n</li>\n<li><p>用帕斯卡命名法</p>\n</li>\n<li><p>get和set可以只有一个</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">TestInfo</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> name<span class=\"token punctuation\">;</span>\n  \n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Name\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">get</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n  \n        <span class=\"token keyword\">set</span>\n        <span class=\"token punctuation\">&#123;</span>\n            name <span class=\"token operator\">=</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n  \n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>自动属性（特殊需求）</p>\n<ul>\n<li><p>用于外部能得不能改的变量</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">TestInfo</span>\n   <span class=\"token punctuation\">&#123;</span>\n       <span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> name<span class=\"token punctuation\">;</span>\n    \n       <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Name\n       <span class=\"token punctuation\">&#123;</span>\n           <span class=\"token keyword\">get</span>\n           <span class=\"token punctuation\">&#123;</span>\n               <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span>             \n           <span class=\"token punctuation\">&#125;</span>\n    \n           <span class=\"token keyword\">set</span>\n           <span class=\"token punctuation\">&#123;</span>\n               name <span class=\"token operator\">=</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">;</span>\n               <span class=\"token comment\">//可以直接在类内当成员变量直接使用</span>\n               Age <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n           <span class=\"token punctuation\">&#125;</span>\n       <span class=\"token punctuation\">&#125;</span>\n    \n       <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> Age\n       <span class=\"token punctuation\">&#123;</span>\n           <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span>\n           <span class=\"token keyword\">private</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span>\n       \n       <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"索引器\"><a href=\"#索引器\" class=\"headerlink\" title=\"索引器\"></a>索引器</h2><ul>\n<li><p>一般成员中有<strong>数组参数</strong>时可以简化使用</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyArr</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> arr<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> currentIndex<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//查</span>\n        <span class=\"token comment\">//改</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> index<span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">get</span>\n            <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> index <span class=\"token operator\">&lt;=</span> currentIndex<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">set</span> \n            <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> index <span class=\"token operator\">&lt;=</span> currentIndex<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">&#123;</span>\n                    arr<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token keyword\">else</span>\n                <span class=\"token punctuation\">&#123;</span>\n                    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"索引超过数组范围\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n\n            <span class=\"token punctuation\">&#125;</span>\n        \n       <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"静态成员\"><a href=\"#静态成员\" class=\"headerlink\" title=\"静态成员\"></a>静态成员</h2><ul>\n<li>用static修饰的成员变量，方法，属性等称为静态成员，具有唯一性</li>\n<li>可以直接用类名 **. ** 出来使用</li>\n<li>静态成员与程序同生共死（程序运行就会在静态存储区分配内存）</li>\n<li>静态成员<strong>不能直接使用</strong>非静态成员（因为此时普通成员还没有被实例化）</li>\n<li>静态变量：1.常用于唯一变量的声明，2.方便别人获取的对象申明</li>\n<li>静态方法：常用的唯一方法申明</li>\n<li>const常量是一种特殊的static成员，也可以直接用类名 <strong>.</strong> 出来使用</li>\n</ul>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//将构造函数声明成私有保证外部不能创建对象</span>\n    <span class=\"token keyword\">private</span> <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n\n\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">//静态成员变量保证唯一性</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Test</span> t <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//成员属性方法保证只能外部得不能改</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">Test</span> T\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">get</span> \n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> t<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>      \n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是一个单例\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        \n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        Test<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">.</span><span class=\"token function\">Print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> \n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"静态类\"><a href=\"#静态类\" class=\"headerlink\" title=\"静态类\"></a>静态类</h2><ul>\n<li>用static修饰的类</li>\n<li>静态类不能被实例化</li>\n<li>只能存在静态成员</li>\n<li>一般用于唯一工具类（将常用的静态成员写在静态类中，方便使用）</li>\n</ul>\n<h2 id=\"静态构造函数\"><a href=\"#静态构造函数\" class=\"headerlink\" title=\"静态构造函数\"></a>静态构造函数</h2><ul>\n<li>用static修饰的构造函数</li>\n<li>静态类和普通类都可以存在静态构造函数</li>\n<li>不能有参数</li>\n<li>只会自动调用一次</li>\n<li>用于在静态构造函数中初始化静态变量 </li>\n</ul>\n<h2 id=\"拓展方法\"><a href=\"#拓展方法\" class=\"headerlink\" title=\"拓展方法\"></a>拓展方法</h2><ul>\n<li><p>为现有<strong>非静态的变量</strong>类型添加新方法</p>\n</li>\n<li><p>一定写在<strong>静态类</strong>中</p>\n</li>\n<li><p>一定是<strong>静态函数</strong></p>\n</li>\n<li><p>基本语法</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token comment\">//访问修饰符 static 返回值 函数名(this 拓展类型 参数名,参数类型 参数名...)</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Tool</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">SpeadValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> Value<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"int拓展方法\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token punctuation\">&#125;</span>\n    \n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"运算符重载\"><a href=\"#运算符重载\" class=\"headerlink\" title=\"运算符重载\"></a>运算符重载</h2><ul>\n<li><p>让自定义类和结构体对象可以进行运算</p>\n</li>\n<li><p>条件运算符需要成对实现</p>\n</li>\n<li><p>一个符号可以多个重载</p>\n</li>\n<li><p>不能使用ref和out</p>\n</li>\n<li><p>基本语法</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Point</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> x<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> y<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">Point</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> x<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> y<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    \n    <span class=\"token comment\">//访问修饰符 static 返回类型 operator 运算符(参数列表)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span> <span class=\"token operator\">==</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Point</span> A<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Point</span> B<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">.</span>x <span class=\"token operator\">==</span> B<span class=\"token punctuation\">.</span>x <span class=\"token operator\">&amp;&amp;</span> A<span class=\"token punctuation\">.</span>y <span class=\"token operator\">==</span> B<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    \n    <span class=\"token comment\">//访问修饰符 static 返回类型 operator 运算符(参数列表)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span> <span class=\"token operator\">!=</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Point</span> A<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Point</span> B<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">.</span>x <span class=\"token operator\">!=</span> B<span class=\"token punctuation\">.</span>x <span class=\"token operator\">||</span> A<span class=\"token punctuation\">.</span>y <span class=\"token operator\">!=</span> B<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h2><ul>\n<li><p>C#中只有单继承</p>\n</li>\n<li><p>传递性：子类继承父类的父类的所有内容</p>\n</li>\n<li><p>子类的同名成员会隐藏父类的同名成员</p>\n</li>\n<li><p>申明对象时会先执行父类构造函数再调用子类构造函数（默认自动调用的是父类的无参构造函数，可通过base指定待用父类构造）</p>\n</li>\n<li><p>若要有意请用new标识</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Monster</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">Monster</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> A<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        \n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Goblin</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">Monster</span></span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">Goblin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword\">base</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        \n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">ATK</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"攻击!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       \n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Boss</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">Monster</span></span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">Boss</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword\">base</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Skill</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"释放技能\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"里氏替换原则\"><a href=\"#里氏替换原则\" class=\"headerlink\" title=\"里氏替换原则\"></a>里氏替换原则</h2><ul>\n<li><p>概念：任何父类出现的地方，子类都可以代替</p>\n</li>\n<li><p>父类容器可以装子类对象 ，(切记子类容器不能装父类对象)</p>\n</li>\n<li><p>方便进行对象存储和管理</p>\n</li>\n<li><p>is和as</p>\n<ul>\n<li><p>is：判断一个对象是否是指定类对象（是为true，不是false）</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token comment\">//语法</span>\n<span class=\"token comment\">//类对象 is 类名</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n<li><p>as：将一个对象转换成指定类对象（成功返回指定类型，不是返回null）</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token comment\">//语法</span>\n<span class=\"token comment\">//类对象 as 类名</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n</ul>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">Random</span> Rand <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Monster<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> MonsterArr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Monster</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> MonsterArr<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Rand<span class=\"token punctuation\">.</span><span class=\"token function\">Next</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            MonsterArr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Boss</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">else</span>\n        <span class=\"token punctuation\">&#123;</span>\n            MonsterArr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Goblin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>               \n        <span class=\"token punctuation\">&#125;</span>           \n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> MonsterArr<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>MonsterArr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token keyword\">is</span> <span class=\"token class-name\">Boss</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token punctuation\">(</span>MonsterArr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> <span class=\"token class-name\">Boss</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Skill</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>MonsterArr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token keyword\">is</span> <span class=\"token class-name\">Goblin</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token punctuation\">(</span>MonsterArr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> <span class=\"token class-name\">Goblin</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ATK</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                \n        <span class=\"token punctuation\">&#125;</span>          \n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"万物之父\"><a href=\"#万物之父\" class=\"headerlink\" title=\"万物之父\"></a>万物之父</h2><ul>\n<li><p>关键字：object</p>\n</li>\n<li><p>object是所有类型的基类，是一个引用类型</p>\n</li>\n<li><p>可以用里氏替换原则，用object容器装所有对象</p>\n</li>\n<li><p>可以用来表示不确定类型，作为函数参数类型</p>\n</li>\n<li><p>引用类型用is和as转换对应类型使用</p>\n</li>\n<li><p>值类型使用强制转换使用</p>\n</li>\n<li><p>万物之父中的方法</p>\n<ul>\n<li><p>静态方法</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">API</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">Equals</td>\n<td align=\"center\">判断两个对象是否相等，最终判断权，交给左侧对象的Equals方法（引用类型是否相等判定是否指向同一内存地址）</td>\n</tr>\n<tr>\n<td align=\"center\">ReferenceEquals</td>\n<td align=\"center\">判断两个引用类型的对象是否相等，值类型始终为false</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>成员方法</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">API</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">GetType</td>\n<td align=\"center\">获取对象运行时的类型Type</td>\n</tr>\n<tr>\n<td align=\"center\">MemberwiseClone</td>\n<td align=\"center\">获取对象的浅拷贝对象（返回一个新的对象），新对象中的引用类型变量和老对象中指向相同内存地址</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>虚方法</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">API</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">Equals</td>\n<td align=\"center\">重写该方法定义比较相等的规则</td>\n</tr>\n<tr>\n<td align=\"center\">GetHashCode</td>\n<td align=\"center\">重写该方法定义自己的哈希算法</td>\n</tr>\n<tr>\n<td align=\"center\">ToString</td>\n<td align=\"center\">重写该方法定义自己的对象转字符串规则</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"装箱和拆箱\"><a href=\"#装箱和拆箱\" class=\"headerlink\" title=\"装箱和拆箱\"></a>装箱和拆箱</h2><ul>\n<li>装箱<ul>\n<li>将值类型用引用类型存储</li>\n<li>栈内存会迁移到堆内存中</li>\n</ul>\n</li>\n<li>拆箱<ul>\n<li>将引用类型存储的值类型取出来</li>\n<li>堆内存会迁移到栈内存中</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"密封类\"><a href=\"#密封类\" class=\"headerlink\" title=\"密封类\"></a>密封类</h2><ul>\n<li>关键字：sealed</li>\n<li>sealed修饰的类无法被继承</li>\n</ul>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token comment\">//密封类</span>\n<span class=\"token keyword\">sealed</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span>\n<span class=\"token punctuation\">&#123;</span> \n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"密封方法\"><a href=\"#密封方法\" class=\"headerlink\" title=\"密封方法\"></a>密封方法</h2><ul>\n<li>关键字sealed修饰的重写函数</li>\n<li>让虚方法或者抽象方法之后不能再被重写</li>\n</ul>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Speak</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">virtual</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span> \n    \n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">Animal</span></span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//密封方法 不能在被子类重写</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">sealed</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Speak</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        \n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">//密封方法 不能在被子类重写</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">sealed</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        \n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">WhitePerson</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">Person</span></span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//不能重写密封方法</span>\n    <span class=\"token comment\">//public override void Speak()</span>\n    <span class=\"token comment\">//&#123;</span>\n\n    <span class=\"token comment\">//&#125;</span>\n\n    <span class=\"token comment\">//不能重写密封方法</span>\n    <span class=\"token comment\">//public override void Eat()</span>\n    <span class=\"token comment\">//&#123;</span>\n\n    <span class=\"token comment\">//&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"多态\"><a href=\"#多态\" class=\"headerlink\" title=\"多态\"></a>多态</h2><ul>\n<li><p>关键字：virtual修饰的虚函数  override修饰的重写函数（配对使用）</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">BaseClass</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//virtual虚函数可被子类重写</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">virtual</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Speak</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是父类\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SubClass</span><span class=\"token punctuation\">:</span><span class=\"token type-list\"><span class=\"token class-name\">BaseClass</span></span>\n<span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token comment\">//override重写父类方法</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Speak</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//调用父类中的方法</span>\n        <span class=\"token comment\">//base.Speak();</span>\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是子类\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//父类对象调用子类行为</span>\n        <span class=\"token class-name\">BaseClass</span> b1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">SubClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        b1<span class=\"token punctuation\">.</span><span class=\"token function\">Speak</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       \n    <span class=\"token punctuation\">&#125;</span>    \n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"抽象类\"><a href=\"#抽象类\" class=\"headerlink\" title=\"抽象类\"></a>抽象类</h2><ul>\n<li>abstruct修饰的类</li>\n<li>不能被实例化的类，遵循里氏替换原则</li>\n</ul>\n<h2 id=\"抽象方法\"><a href=\"#抽象方法\" class=\"headerlink\" title=\"抽象方法\"></a>抽象方法</h2><ul>\n<li>abstruct修饰的方法</li>\n<li>只能在抽象类中声明，没有定义</li>\n<li>不能是私有的</li>\n<li>子类必须用override重写该方法（子类的子类可以选择进行重载）</li>\n</ul>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token comment\">//抽象类</span>\n<span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span>  <span class=\"token class-name\">Animals</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//抽象方法，子类必须重写此方法</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Speak</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">Animals</span></span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Speak</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"嗨\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">Animals</span></span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Speak</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"汪汪汪\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Cat</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">Animals</span></span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Speak</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"喵喵喵\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//抽象类遵循里氏替换原则</span>\n        <span class=\"token class-name\">Animals</span> A1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        A1<span class=\"token punctuation\">.</span><span class=\"token function\">Speak</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Cat</span> c1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Cat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        c1<span class=\"token punctuation\">.</span><span class=\"token function\">Speak</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Dog</span> d1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        d1<span class=\"token punctuation\">.</span><span class=\"token function\">Speak</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h2><ul>\n<li>是一种自定义类型，不能被实例化，可以作为容器存储对象</li>\n<li>关键字：interface</li>\n<li>成员可以不写访问修饰符（默认是public），不能是私有的（private）</li>\n<li>不能包含成员变量</li>\n<li>只包含方法，成员属性，索引器，事件</li>\n<li>成员不能被定义</li>\n<li>接口不能继承类，但可以继承另一个接口（继承的接口不需要实现，在继承该接口的类中一并实现）</li>\n<li>接口是用来继承的，类可以继承多个接口</li>\n<li>类继承接口后，必须实现接口中所有成员，且成员访问修饰符必须是public，可以加virtual关键字在其子类中重写该方法</li>\n<li>显示实现接口<ul>\n<li>当一个类继承两个或以上接口时，这些接口中存在同名方法时需要显示事件接口</li>\n<li>显示实现接口时，不能写访问修饰符</li>\n</ul>\n</li>\n<li>接口遵循里氏替换原则</li>\n</ul>\n<h2 id=\"命名空间\"><a href=\"#命名空间\" class=\"headerlink\" title=\"命名空间\"></a>命名空间</h2><ul>\n<li>用来组织和重用代码</li>\n<li>类似工具包，类就是这个工具包中的一件工具，声明在命名空间中</li>\n<li>命名空间可以分开写（不同文件中也可以写）</li>\n<li>命名空间中不能有同名的类</li>\n<li>不同命名空间中有相同名称的类，必须使用指明出处方式确定使用哪个命名空间中的类</li>\n<li>不同命名空间中相互使用，需要引用命名空间或指明出处</li>\n</ul>\n<h2 id=\"string\"><a href=\"#string\" class=\"headerlink\" title=\"string\"></a>string</h2><ul>\n<li>是一个特殊的引用类型（更像是一个值类型）</li>\n<li>每次重新赋值或者拼接都会分配新的内存空间（若经常改变会非常浪费空间）</li>\n</ul>\n<h2 id=\"StringBuilder\"><a href=\"#StringBuilder\" class=\"headerlink\" title=\"StringBuilder\"></a>StringBuilder</h2><ul>\n<li><p>C#提供的一个用于处理字符串的公共类</p>\n</li>\n<li><p>主要作用：修改字符串时不创建新的对象，需要频繁修改和拼接字符串时使用，提升性能</p>\n</li>\n<li><p>使用需要引用命名空间</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Text</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p>存在一个容量，添加内容超过容量时会自动扩容（当前容量x2倍）</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token class-name\">StringBuilder</span> str <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"123\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//获得容量</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str容量：&#123;0&#125;\"</span><span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">.</span>Capacity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//获得长度</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str当前长度：&#123;0&#125;\"</span><span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//增</span>\nstr<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"123\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//删</span>\nstr<span class=\"token punctuation\">.</span><span class=\"token function\">Remove</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//等等方法</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"面向对象七大原则\"><a href=\"#面向对象七大原则\" class=\"headerlink\" title=\"面向对象七大原则\"></a>面向对象七大原则</h2><p>目的：高内聚低耦合</p>\n<p>从类角度看，减少类内部，对其他类的调用</p>\n<p>从功能模块看，减少模块之间的交互复杂度</p>\n<ul>\n<li>单一职责原则：类被修改几率很大，应该专注于单一功能</li>\n<li>开闭原则：对拓展开发，对修改关闭<ul>\n<li>拓展开发：模块的行为可以被拓展从而满足新需求</li>\n<li>修改关闭：不允许修改模块的源代码（或者尽量使修改最小化）继承就是最典型的开闭原则的体现</li>\n</ul>\n</li>\n<li>里氏替换原则：任何父类出现的地方，子类都可以替代</li>\n<li>依赖倒转原则：要依赖于抽象，不依赖于具体实现</li>\n<li>迪米特原则：一个对象应当对其它对象尽可能的少的了解</li>\n<li>接口分离原则：一个接口不需要提供太多的行为，一个接口应该尽量只提供一个对外的功能，而不是把所有的行为都封装到一个接口中</li>\n<li>合成复用原则：<ul>\n<li>尽量使用对象组合，而不是继承来达到复用的目的</li>\n<li>继承关系是强耦合，组合关系是低耦合</li>\n<li>不能盲目的使用合成复用原则，要在遵循迪米特的原则前提下 </li>\n</ul>\n</li>\n</ul>\n<h2 id=\"C-容器类\"><a href=\"#C-容器类\" class=\"headerlink\" title=\"C#容器类\"></a>C#容器类</h2><ul>\n<li><p>ArrayList</p>\n<ul>\n<li>是C#封装好的类</li>\n<li>本质是一个object（万物之父）类型的数组</li>\n<li>需要引用命名空间using System.Collections;</li>\n<li>装箱拆箱<ul>\n<li>ArrayList本质是一个可以自动扩容的object数组</li>\n<li>object是万物之父的数据，所以存在装箱拆箱</li>\n<li>当进行值类型存储时就是在装箱，将值类型对象取出转换时就是在拆箱</li>\n<li>ArrayList尽量少用</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Stack(栈)</p>\n<ul>\n<li>是C#封装好的类</li>\n<li>需要引用命名空间using System.Collections;</li>\n<li>本质也是object数组，只是封装了特殊的存储规则</li>\n<li>是栈存储器，栈是一种先进后出的数据结构</li>\n<li>push是增加数据，pop是弹出数据</li>\n<li>用foreach方法遍历，顺序从栈顶到栈底</li>\n<li>用ToArray方法可以转换成object数组，顺序从栈顶到栈底</li>\n<li>无法更改元素元素，只能清空</li>\n<li>先存入的数据后获取，后存入的数据先获取（先进后出）<br><img src=\"https://cbaoblog.oss-cn-shanghai.aliyuncs.com/img/%E6%A0%88.png\" alt=\"栈\"></li>\n</ul>\n</li>\n<li><p>Queue</p>\n<ul>\n<li>是C#封装好的类</li>\n<li>需要引用命名空间using System.Collections;</li>\n<li>本质也是object数组，只是封装了特殊的存储规则</li>\n<li>队列是一种先进先出的数据结构（先存入的数据先获取，后存入的数据后获取）</li>\n<li>无法更改元素元素，只能清空</li>\n<li>先进先出</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://cbaoblog.oss-cn-shanghai.aliyuncs.com/img/image-20220918184336507.png\" alt=\"image-20220918184336507\"></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">API</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">Enqueue</td>\n<td align=\"center\">增加元素</td>\n</tr>\n<tr>\n<td align=\"center\">Dequeue</td>\n<td align=\"center\">取出元素</td>\n</tr>\n<tr>\n<td align=\"center\">Peek</td>\n<td align=\"center\">查看头部元素但不会移除</td>\n</tr>\n<tr>\n<td align=\"center\">Contains</td>\n<td align=\"center\">是否包含</td>\n</tr>\n<tr>\n<td align=\"center\">Clear</td>\n<td align=\"center\">清空</td>\n</tr>\n<tr>\n<td align=\"center\">Count</td>\n<td align=\"center\">长度</td>\n</tr>\n<tr>\n<td align=\"center\">ToArray</td>\n<td align=\"center\">转换成object数组</td>\n</tr>\n</tbody></table>\n<ul>\n<li><p>Hashtable</p>\n<ul>\n<li>又称散列表，是基于键的哈希代码组织起来的键值对（不能出现相同的键）</li>\n<li>需要引用命名空间using System.Collections;</li>\n<li>主要作用是提高数据查询的效率</li>\n<li>使用键来访问集合中的元素</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">API</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">Add</td>\n<td align=\"center\">添加键值对</td>\n</tr>\n<tr>\n<td align=\"center\">Remove</td>\n<td align=\"center\">通过键移除对应元素</td>\n</tr>\n<tr>\n<td align=\"center\">Clear</td>\n<td align=\"center\">清除</td>\n</tr>\n<tr>\n<td align=\"center\">[]</td>\n<td align=\"center\">通过键查找对应的值，找不到会返回空</td>\n</tr>\n<tr>\n<td align=\"center\">Contains</td>\n<td align=\"center\">通过键查找是否包含</td>\n</tr>\n<tr>\n<td align=\"center\">ContainsKey</td>\n<td align=\"center\">通过键查找是否包含</td>\n</tr>\n<tr>\n<td align=\"center\">ContainsValue</td>\n<td align=\"center\">通过值查找是否包含</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n<h2 id=\"泛型\"><a href=\"#泛型\" class=\"headerlink\" title=\"泛型\"></a>泛型</h2><ul>\n<li><p>将类型参数化，达到代码重用的目的</p>\n</li>\n<li><p>基本语法</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token comment\">//泛型类</span>\n<span class=\"token keyword\">class</span> 类名<span class=\"token operator\">&lt;</span>泛型占位字母<span class=\"token operator\">></span>\n    \n<span class=\"token comment\">//泛型接口</span>\n<span class=\"token keyword\">interface</span> 接口名<span class=\"token operator\">&lt;</span>泛型占位字母<span class=\"token operator\">></span>\n    \n<span class=\"token comment\">//泛型函数</span>\n返回类型 函数名<span class=\"token operator\">&lt;</span>泛型占位字母<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>参数列表<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>泛型约束</p>\n<ul>\n<li><p>限制泛型所支持的类型</p>\n</li>\n<li><p>关键字：where</p>\n</li>\n<li><p>泛型的6中约束</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">语法</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">where 泛型字母 : struct</td>\n<td align=\"center\">值类型</td>\n</tr>\n<tr>\n<td align=\"center\">where 泛型字母 : class</td>\n<td align=\"center\">引用类型</td>\n</tr>\n<tr>\n<td align=\"center\">where 泛型字母 : new()</td>\n<td align=\"center\">存在无参公共构造函数</td>\n</tr>\n<tr>\n<td align=\"center\">where 泛型字母 : 类名</td>\n<td align=\"center\">某个类本身或者其派生类</td>\n</tr>\n<tr>\n<td align=\"center\">where 泛型字母 : 接口名</td>\n<td align=\"center\">某个接口的派生类型</td>\n</tr>\n<tr>\n<td align=\"center\">where 泛型字母 : 另一个泛型字母</td>\n<td align=\"center\">另一个泛型类型本身或者派生类型</td>\n</tr>\n</tbody></table>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token comment\">//案例</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Test<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span> <span class=\"token keyword\">where</span> <span class=\"token class-name\">T</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token keyword\">struct</span></span>\n<span class=\"token punctuation\">&#123;</span> \n        \n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"List\"><a href=\"#List\" class=\"headerlink\" title=\"List\"></a>List</h2><ul>\n<li>是C#封装好的类</li>\n<li>本质是一个可变类型的泛型数组</li>\n<li>需要引入命名空间using System.Collections.Generic</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">API</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">Add</td>\n<td align=\"center\">添加</td>\n</tr>\n<tr>\n<td align=\"center\">AddRange</td>\n<td align=\"center\">批量添加</td>\n</tr>\n<tr>\n<td align=\"center\">Remove</td>\n<td align=\"center\">移除指定元素</td>\n</tr>\n<tr>\n<td align=\"center\">RemoveAt</td>\n<td align=\"center\">移除指定位置元素</td>\n</tr>\n<tr>\n<td align=\"center\">Clear</td>\n<td align=\"center\">清空</td>\n</tr>\n<tr>\n<td align=\"center\">Contains</td>\n<td align=\"center\">元素是否包含</td>\n</tr>\n<tr>\n<td align=\"center\">IndexOf</td>\n<td align=\"center\">从头查找元素位置</td>\n</tr>\n<tr>\n<td align=\"center\">LastIndexOf</td>\n<td align=\"center\">从末尾查找元素位置（返回的还是正向的索引值）</td>\n</tr>\n<tr>\n<td align=\"center\">Count</td>\n<td align=\"center\">长度</td>\n</tr>\n<tr>\n<td align=\"center\">Capacity</td>\n<td align=\"center\">容量</td>\n</tr>\n</tbody></table>\n<h2 id=\"Dictionary\"><a href=\"#Dictionary\" class=\"headerlink\" title=\"Dictionary\"></a>Dictionary</h2><ul>\n<li>可以理解为，拥有泛型的Hashtable</li>\n<li>是基于键的哈希代码组织起来的键/值对</li>\n</ul>\n<h2 id=\"LinkedList\"><a href=\"#LinkedList\" class=\"headerlink\" title=\"LinkedList\"></a>LinkedList</h2><ul>\n<li>是C#封装好的类</li>\n<li>本质是一个可变类型的泛型双向链表</li>\n<li>using System.Collections.Generic</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">API</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">AddLast</td>\n<td align=\"center\">在链表尾部添加元素</td>\n</tr>\n<tr>\n<td align=\"center\">AddFirst</td>\n<td align=\"center\">在链表头部添加元素</td>\n</tr>\n<tr>\n<td align=\"center\">RemoveFirst</td>\n<td align=\"center\">移除头部节点</td>\n</tr>\n<tr>\n<td align=\"center\">RemoveLast</td>\n<td align=\"center\">移除尾部节点</td>\n</tr>\n<tr>\n<td align=\"center\">Remove</td>\n<td align=\"center\">移除指定节点</td>\n</tr>\n<tr>\n<td align=\"center\">Clear</td>\n<td align=\"center\">清空</td>\n</tr>\n<tr>\n<td align=\"center\">First</td>\n<td align=\"center\">头节点</td>\n</tr>\n<tr>\n<td align=\"center\">Last</td>\n<td align=\"center\">尾节点</td>\n</tr>\n<tr>\n<td align=\"center\">Find</td>\n<td align=\"center\">找到指定值的节点（未找到返回null）</td>\n</tr>\n<tr>\n<td align=\"center\">AddAfter</td>\n<td align=\"center\">在一个节点后面添加一个节点</td>\n</tr>\n<tr>\n<td align=\"center\">AddBefore</td>\n<td align=\"center\">在一个节点前面添加一个节点</td>\n</tr>\n<tr>\n<td align=\"center\">Contains</td>\n<td align=\"center\">查找是否包含</td>\n</tr>\n<tr>\n<td align=\"center\">节点.Value</td>\n<td align=\"center\">用来改值</td>\n</tr>\n</tbody></table>\n<h2 id=\"委托\"><a href=\"#委托\" class=\"headerlink\" title=\"委托\"></a>委托</h2><ul>\n<li><p>委托是函数（方法）的容器,可以理解为表示函数（方法）的变量类型</p>\n</li>\n<li><p>用来存储，传递函数</p>\n</li>\n<li><p>本质是一个用来定义函数的类型（返回值和参数的类型）</p>\n</li>\n<li><p>不同的函数必须对应和各自格式一致的委托</p>\n</li>\n<li><p>关键字：delegate</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token comment\">//语法 函数名前加delegate</span>\n访问修饰符 <span class=\"token keyword\">delegate</span> 返回值 委托名<span class=\"token punctuation\">(</span>参数列表<span class=\"token punctuation\">)</span><span class=\"token comment\">//访问修饰符默认public</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n<li><p>可以申明在namespace和class语句块中，不能重名，通常写在namespace中</p>\n</li>\n<li><p>常作为类的成员或者作为函数的参数</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">API</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">Invoke</td>\n<td align=\"center\">调用委托存储的函数</td>\n</tr>\n<tr>\n<td align=\"center\">委托名()</td>\n<td align=\"center\">调用委托存储的函数</td>\n</tr>\n<tr>\n<td align=\"center\">+=</td>\n<td align=\"center\">添加一个函数</td>\n</tr>\n<tr>\n<td align=\"center\">-=</td>\n<td align=\"center\">移除一个函数</td>\n</tr>\n</tbody></table>\n<ul>\n<li><p>系统自带的委托</p>\n<ul>\n<li><p>Action:无参无返回值的委托</p>\n</li>\n<li><p>Action&lt;&gt;:泛型委托 可以传1~16个参数的无返回值的委托</p>\n</li>\n<li><p>Func&lt;&gt;:泛型委托 可以传1~16个参数的返回值无参的委托</p>\n</li>\n<li><p>Func&lt;in T,out TResult&gt;：可以传1~16个参数的自定义返回值的委托</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"事件\"><a href=\"#事件\" class=\"headerlink\" title=\"事件\"></a>事件</h2><ul>\n<li><p>事件是基于委托的存在</p>\n</li>\n<li><p>事件是委托的安全包裹</p>\n</li>\n<li><p>让委托的使用更具安全性</p>\n</li>\n<li><p>事件 是一种特殊的变量类型</p>\n</li>\n<li><p>关键字:event</p>\n</li>\n<li><p>只能作为成员存在于类，接口，以及结构体中</p>\n</li>\n<li><p>使用：委托怎么用 事件就怎么用</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token comment\">//语法</span>\n访问修饰符 <span class=\"token keyword\">event</span> 委托类型 事件名\n<span class=\"token comment\">//事件是作为 成员变量存在于类中</span>\n<span class=\"token comment\">//不能在类外部直接赋值和调用</span>\n<span class=\"token comment\">//可以在外部进行加减添加和移除记录的函数，只能用复合运算符+= -=</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"匿名函数\"><a href=\"#匿名函数\" class=\"headerlink\" title=\"匿名函数\"></a>匿名函数</h2><ul>\n<li><p>没有名字的函数</p>\n</li>\n<li><p>匿名函数主要是配合委托和事件进行使用</p>\n</li>\n<li><p>脱离委托和事件，是不会使用匿名函数的</p>\n</li>\n<li><p>基本语法</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\">delete <span class=\"token punctuation\">(</span>参数列表<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\n\t<span class=\"token comment\">//函数逻辑</span>\n\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//此处要加分号</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>何时使用</p>\n<ul>\n<li>函数中传递委托参数时</li>\n<li>委托或者事件赋值时</li>\n</ul>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">JinJie</span>\n<span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">//无参无返回值</span>\n            <span class=\"token class-name\">Action</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">delegate</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"无参无返回值\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">//有参</span>\n            <span class=\"token class-name\">Action<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">></span></span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">delegate</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> a<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> b<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#123;</span>\n                Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"123\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">//有返回值，直接使用return返回</span>\n            <span class=\"token class-name\">Func<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">></span></span> c <span class=\"token operator\">=</span> <span class=\"token keyword\">delegate</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> <span class=\"token string\">\"1234\"</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">//一般情况会作为函数参数传递或者作为函数返回值</span>\n            <span class=\"token comment\">//作为函数参数</span>\n            <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">FuncTest</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Action</span> ac<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token function\">ac</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>            \n            <span class=\"token punctuation\">&#125;</span>\n\n            <span class=\"token function\">FuncTest</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">delegate</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n            <span class=\"token punctuation\">&#123;</span>\n                Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"函数参数\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>             \n            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">//作为函数返回值</span>\n            <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">Action</span> <span class=\"token function\">FuncTest2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token keyword\">delegate</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">&#123;</span>\n                    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"函数返回值\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>          \n            <span class=\"token punctuation\">&#125;</span>\n\n            <span class=\"token function\">FuncTest2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>注意事项：添加到委托或者事件容器中后无法单独移除</p>\n</li>\n</ul>\n<h2 id=\"Lambad表达式\"><a href=\"#Lambad表达式\" class=\"headerlink\" title=\"Lambad表达式\"></a>Lambad表达式</h2><ul>\n<li><p>理解为匿名函数的简写</p>\n</li>\n<li><p>除了写法不同,使用上是和匿名函数一样的</p>\n</li>\n<li><p>都是配合委托或事件使用的</p>\n</li>\n<li><p>基本语法</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token punctuation\">(</span>参数列表<span class=\"token punctuation\">)</span><span class=\"token operator\">=></span>\n<span class=\"token punctuation\">&#123;</span>\n <span class=\"token comment\">//函数体</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//此处要加分号</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>使用方法</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">JinJie</span>\n<span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">//无参</span>\n            <span class=\"token class-name\">Action</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span> Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"无参Lambad使用\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">//有参无返回值不省略类型</span>\n            <span class=\"token class-name\">Action<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">></span></span> b <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> Value<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span> Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>Value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">//有参无返回值省略类型</span>\n            <span class=\"token class-name\">Action<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">></span></span> c <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Value<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span> Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>Value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token number\">33</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">//无参有返回值</span>\n            <span class=\"token class-name\">Func<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">></span></span> d <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> <span class=\"token number\">123</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">//有参有返回值</span>\n            <span class=\"token class-name\">Func<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">></span></span> e <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Value<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n            <span class=\"token punctuation\">&#123;</span>\n                Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>Value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token string\">\"123\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token function\">e</span><span class=\"token punctuation\">(</span><span class=\"token number\">333</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>闭包（重要知识点）</p>\n<ul>\n<li>内层的函数可以引用包含在它外层的函数的变量</li>\n<li>即使外层函数执行已经中止</li>\n<li>特别注意：该变量提供的值并非变量创建的值，而是在父函数范围内的最终值</li>\n</ul>\n</li>\n</ul>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">JinJie</span>\n<span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n    <span class=\"token punctuation\">&#123;</span>\n\n        <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> x <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//闭包</span>\n            <span class=\"token class-name\">Action</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n            <span class=\"token punctuation\">&#123;</span>\n                Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#123;</span>\n                x<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                a <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n                <span class=\"token punctuation\">&#123;</span>\n                    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            <span class=\"token comment\">//会一直打印20，因为闭包中使用的变量提供的值并非变量创建的值，而是在父函数范围内的最终值</span>\n            <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><p>闭包中的注意事项</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">JinJie</span>\n<span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">Action</span> <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">Action</span> a<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">11</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">//此Index非彼Index 每次循环都会创建一个新的Index，所以每次打印的都是当前Index的最终值</span>\n                <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> Index <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n                a <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n                <span class=\"token punctuation\">&#123;</span>\n                    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>Index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n      \n\n        <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">//会打印0~10</span>\n            <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"List排序\"><a href=\"#List排序\" class=\"headerlink\" title=\"List排序\"></a>List排序</h2><ul>\n<li><p>Sort:内置类型可以直接使用Sort排序</p>\n</li>\n<li><p>自定义类排序需要继承接口IComparable&lt;&gt;</p>\n<ul>\n<li><p>该接口返回值的含义</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">返回值</th>\n<th align=\"center\">含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">小于0</td>\n<td align=\"center\">放在传入对象的前面</td>\n</tr>\n<tr>\n<td align=\"center\">等于0</td>\n<td align=\"center\">保持当前位置不变</td>\n</tr>\n<tr>\n<td align=\"center\">大于0</td>\n<td align=\"center\">放在传入对象的后面</td>\n</tr>\n</tbody></table>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IComparable<span class=\"token punctuation\">&lt;</span>Test<span class=\"token punctuation\">></span></span></span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> c<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">public</span> <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> c<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>c <span class=\"token operator\">=</span> c<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> <span class=\"token function\">CompareTo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Test</span> other<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">></span> other<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> other<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token keyword\">else</span>\n                <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li><p>通过委托排序</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">CSharp</span>\n<span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> A<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> A<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>A <span class=\"token operator\">=</span> A<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    \n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span>Test<span class=\"token punctuation\">></span></span> L1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span>Test<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            L1<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Test</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            L1<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Test</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            L1<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Test</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            L1<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Test</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            L1<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Test</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            L1<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Test</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            L1<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Test</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\n\t\t\t<span class=\"token comment\">//使用委托</span>\n\t\t\t<span class=\"token comment\">//可以重载Sort传递一个函数</span>\n            L1<span class=\"token punctuation\">.</span><span class=\"token function\">Sort</span><span class=\"token punctuation\">(</span>SortTest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Test</span> item <span class=\"token keyword\">in</span> L1<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#123;</span>\n                Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\t\t\n\t\t\n        <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> <span class=\"token function\">SortTest</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Test</span> A<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Test</span> B<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">.</span>A <span class=\"token operator\">></span> B<span class=\"token punctuation\">.</span>A<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">.</span>A <span class=\"token operator\">==</span> B<span class=\"token punctuation\">.</span>A<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">else</span>\n            <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        \n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>通过匿名函数</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">CSharp</span>\n<span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> A<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> A<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>A <span class=\"token operator\">=</span> A<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    \n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span>Test<span class=\"token punctuation\">></span></span> L1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span>Test<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            L1<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Test</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            L1<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Test</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            L1<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Test</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            L1<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Test</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            L1<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Test</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            L1<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Test</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            L1<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Test</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">//通过匿名函数</span>\n            L1<span class=\"token punctuation\">.</span><span class=\"token function\">Sort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">delegate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Test</span> A<span class=\"token punctuation\">,</span><span class=\"token class-name\">Test</span> B<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">.</span>A <span class=\"token operator\">></span> B<span class=\"token punctuation\">.</span>A<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">.</span>A <span class=\"token operator\">==</span> B<span class=\"token punctuation\">.</span>A<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token keyword\">else</span>\n                <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Test</span> item <span class=\"token keyword\">in</span> L1<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#123;</span>\n                Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>通过Lambad表达式</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">CSharp</span>\n<span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> A<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> A<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>A <span class=\"token operator\">=</span> A<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    \n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span>Test<span class=\"token punctuation\">></span></span> L1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span>Test<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            L1<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Test</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            L1<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Test</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            L1<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Test</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            L1<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Test</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            L1<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Test</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            L1<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Test</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            L1<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Test</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token comment\">//通过Lambad表达式</span>\n            L1<span class=\"token punctuation\">.</span><span class=\"token function\">Sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Test</span> A<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Test</span> B<span class=\"token punctuation\">)</span><span class=\"token operator\">=></span>\n            <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">.</span>A <span class=\"token operator\">></span> B<span class=\"token punctuation\">.</span>A<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">.</span>A <span class=\"token operator\">==</span> B<span class=\"token punctuation\">.</span>A<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token keyword\">else</span>\n                <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            \n            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Test</span> item <span class=\"token keyword\">in</span> L1<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#123;</span>\n                Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"协变-out-和逆变-in\"><a href=\"#协变-out-和逆变-in\" class=\"headerlink\" title=\"协变(out)和逆变(in)\"></a>协变(out)和逆变(in)</h2><ul>\n<li>用于在泛型中修饰泛型字母的</li>\n<li>只有泛型接口和泛型委托可以使用</li>\n<li>作用<ul>\n<li>用out修饰的泛型，只能作为返回值</li>\n<li>用in修饰的泛型，只能作为参数</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"协变\"><a href=\"#协变\" class=\"headerlink\" title=\"协变\"></a>协变</h3><ul>\n<li>里氏替换原则中父类可以装子类，子类变父类</li>\n<li>父类泛型委托装子类泛型委托</li>\n</ul>\n<h3 id=\"逆变\"><a href=\"#逆变\" class=\"headerlink\" title=\"逆变\"></a>逆变</h3><ul>\n<li>里氏替换原则中父类可以装子类 但是子类不能装父类，父类变子类 如object变成string</li>\n<li>子类泛型委托装父类泛型委托</li>\n</ul>\n<h2 id=\"多线程\"><a href=\"#多线程\" class=\"headerlink\" title=\"多线程\"></a>多线程</h2><h3 id=\"进程\"><a href=\"#进程\" class=\"headerlink\" title=\"进程\"></a>进程</h3><ul>\n<li>进程(Process)是计算机中的程序关于某数据集合上的一次运行活动</li>\n<li>打开一个应用程序就是在操作系统上开启一个进程</li>\n<li>进程之间可以相互独立运行，互不干扰</li>\n<li>进程之间也可以相互访问，操作</li>\n</ul>\n<h3 id=\"线程\"><a href=\"#线程\" class=\"headerlink\" title=\"线程\"></a>线程</h3><ul>\n<li><p>操作系统能够进行运算调度的最小单位</p>\n</li>\n<li><p>包含在进程中，是进程的实际运作单位</p>\n</li>\n<li><p>一条线程是进程中的一个单一顺序的控制流，一个进程中可以并发多个线程</p>\n</li>\n<li><p>语法</p>\n<ul>\n<li><p>线程类Thread</p>\n</li>\n<li><p>需要命名空间 using System.Threading;</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token comment\">//申明一个新线程</span>\n<span class=\"token comment\">//线程执行的代码，需要封装到一个函数中</span>\n\n<span class=\"token comment\">//启动线程 Start</span>\n\n<span class=\"token comment\">//设置为后台线程 IsBackground</span>\n<span class=\"token comment\">//当前台线程都结束时，整个程序就结束了，即使还有后台线程在运行</span>\n<span class=\"token comment\">//后台线程不会防止应用程序的进程被终止</span>\n<span class=\"token comment\">//如果不设置为后台进程，可能会导致进程无法正常关闭</span>\n\n<span class=\"token comment\">//关闭释放一个线程</span>\n<span class=\"token comment\">//如果开启的线程中不是死循环，是能够结束的逻辑，那么不要刻意的去关闭它</span>\n<span class=\"token comment\">//如果是死循环 想要中止该线程 有两种方法</span>\n<span class=\"token comment\">//死循环中的bool标识</span>\n<span class=\"token comment\">//通过线程提供的方法（.Net core版本中无法中止 会报错） Abort; 之后置null</span>\n\n<span class=\"token comment\">//线程休眠 Sleep 让线程休眠多少毫秒 在哪个线程中执行就休眠哪个线程</span>\n\n<span class=\"token comment\">//线程之间共享数据</span>\n<span class=\"token comment\">//多个线程使用的内存是共享的，都属于该应用程序</span>\n<span class=\"token comment\">//当多线程同时操作同一片内存区域时可能会出现问题</span>\n<span class=\"token comment\">//可以通过加锁的形式避免问题 lock </span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li><p>多线程一般用于处理一些复杂耗时的逻辑，比如寻路，网络通信等</p>\n</li>\n</ul>\n<h2 id=\"预处理器指令\"><a href=\"#预处理器指令\" class=\"headerlink\" title=\"预处理器指令\"></a>预处理器指令</h2><ul>\n<li><p>什么是编译器</p>\n<ul>\n<li>编译器是一种翻译程序</li>\n<li>将源语言程序翻译成目标语言程序</li>\n<li>源语言程序：C# C++ Java等语言写出的源程序</li>\n<li>目标语言程序：二进制数表示的伪机器代码的程序</li>\n</ul>\n</li>\n<li><p>以#开头</p>\n</li>\n<li><p>预处理器指令不是语句，所以不以分号;结束</p>\n</li>\n<li><p>常用预处理器指令</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token preprocessor property\">#<span class=\"token directive keyword\">define</span></span>\n\n<span class=\"token preprocessor property\">#<span class=\"token directive keyword\">undef</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token preprocessor property\">#<span class=\"token directive keyword\">if</span></span>\n<span class=\"token preprocessor property\">#<span class=\"token directive keyword\">elif</span></span>\n<span class=\"token preprocessor property\">#<span class=\"token directive keyword\">else</span></span>\n<span class=\"token preprocessor property\">#<span class=\"token directive keyword\">endif</span></span>\n<span class=\"token comment\">//与if语句规则一样，一般配合#define定义的符号使用</span>\n<span class=\"token comment\">//用于告诉编译器进行编译代码的流程控制</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token preprocessor property\">#<span class=\"token directive keyword\">warning</span></span>\n<span class=\"token preprocessor property\">#<span class=\"token directive keyword\">error</span></span>\n<span class=\"token comment\">//告诉编译器是报警告还是报错误</span>\n<span class=\"token comment\">//一般配合#if使用</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"反射\"><a href=\"#反射\" class=\"headerlink\" title=\"反射\"></a>反射</h2><ul>\n<li><p>程序集：由编译器编译得到的，供进一步编译执行的那个中间产物</p>\n<ul>\n<li>在windows系统中一般表现为后缀为.dll(库文件)或者.exe(可执行文件)的格式</li>\n</ul>\n</li>\n<li><p>元数据：用来描述数据的数据，有关程序以及类型的数据被称为元数据（类，类中的函数，变量等信息），被保存在程序集中</p>\n</li>\n<li><p>反射的概念：程序在运行时，可以查看其它程序集或者自身的元数据</p>\n<ul>\n<li>一个运行的程序查看本身或者其它程序的元数据的行为叫做反射</li>\n</ul>\n</li>\n<li><p>反射的作用</p>\n<ul>\n<li>程序运行时得到所有元数据，包括元数据的特性</li>\n<li>程序运行时，实例化对象，操作对象</li>\n<li>程序运行时创建新对象，用这些对象执行任务</li>\n</ul>\n</li>\n<li><p>语法</p>\n<ul>\n<li><p>Type</p>\n<ul>\n<li><p>类的信息类</p>\n</li>\n<li><p>反射功能的基础</p>\n</li>\n<li><p>访问元数据的主要方式</p>\n</li>\n<li><p>使用Type的成员获取有关类型声明的信息</p>\n</li>\n<li><p>有关类型的成员（构造函数，方法，字段，属性和类的事件等）</p>\n</li>\n<li><p>获取Type的三种方式</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token comment\">//万物之父object中的GetType()可以获取对象的Type</span>\n<span class=\"token class-name\"><span class=\"token keyword\">int</span></span> a <span class=\"token operator\">=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Type</span> T1 <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">GetType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>T1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//通过typeof关键字 传入类名 也可以得到对象的Type</span>\n<span class=\"token class-name\">Type</span> T2 <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\"><span class=\"token keyword\">int</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>T2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//通过类的名字（必须包含命名空间）也可以得到对象的Type</span>\n<span class=\"token class-name\">Type</span> T3 <span class=\"token operator\">=</span> Type<span class=\"token punctuation\">.</span><span class=\"token function\">GetType</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"System.Int32\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>T3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>得到类的程序集信息：Assembly</p>\n</li>\n<li><p>获取类中的所有公共成员</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token preprocessor property\">#<span class=\"token directive keyword\">define</span> cccc</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Reflection</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Threading</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">CSharp</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> a<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> b<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">float</span></span> c<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            \n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> a<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> b<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">float</span></span> c<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>b <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>c <span class=\"token operator\">=</span> c<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">//首先得到Type</span>\n            <span class=\"token class-name\">Type</span> T1 <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">Test</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">//GetMembers()获得所有公共成员,需要引入命名空间using System.Reflection;</span>\n            <span class=\"token class-name\">MemberInfo<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> M1 <span class=\"token operator\">=</span> T1<span class=\"token punctuation\">.</span><span class=\"token function\">GetMembers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> M1<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#123;</span>\n                Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>M1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"************************************\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">//获得所有构造函数</span>\n            <span class=\"token class-name\">ConstructorInfo<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> ctors <span class=\"token operator\">=</span> T1<span class=\"token punctuation\">.</span><span class=\"token function\">GetConstructors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> ctors<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#123;</span>\n                Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>ctors<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n            <span class=\"token comment\">//获得其中一个构造函数 并执行</span>\n            <span class=\"token comment\">//得构造函数 传入Type数组 数组中的内容按顺序是构造函数形参类型</span>\n            <span class=\"token comment\">//执行构造函数 传入object数组 数组中的内容按顺序传入参数</span>\n\n            <span class=\"token comment\">//获得无参构造</span>\n            <span class=\"token class-name\">ConstructorInfo</span> info <span class=\"token operator\">=</span> T1<span class=\"token punctuation\">.</span><span class=\"token function\">GetConstructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Type</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">//执行无参构造 没有参数时传null</span>\n            <span class=\"token class-name\">Test</span> t1 <span class=\"token operator\">=</span> info<span class=\"token punctuation\">.</span><span class=\"token function\">Invoke</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token class-name\">Test</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">//得到有参构造</span>\n            <span class=\"token class-name\">ConstructorInfo</span> info2 <span class=\"token operator\">=</span> T1<span class=\"token punctuation\">.</span><span class=\"token function\">GetConstructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Type<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\"><span class=\"token keyword\">int</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\"><span class=\"token keyword\">string</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\"><span class=\"token keyword\">float</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Test</span> t2 <span class=\"token operator\">=</span> info2<span class=\"token punctuation\">.</span><span class=\"token function\">Invoke</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"123\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10.2f</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token class-name\">Test</span><span class=\"token punctuation\">;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>t2<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">//等等，剩余的可以去微软官网查看API</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n<li><p>Assembly</p>\n<ul>\n<li>用来加载外部的程序集</li>\n<li>三种加载程序集的函数<ul>\n<li>Assembly.Load(“程序集名称”)：一般用来加载同一文件夹下的其它程序集</li>\n<li>Assembly.LoadFrom(“包含程序集清单的文件的名称或路径”)：一般用来加载不在同一文件下的其它程序集</li>\n<li>Assembly.LoadFile(“要加载的文件的完全限定路径”)：一般用来加载不在同一文件下的其它程序集</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Activator</p>\n<ul>\n<li><p>用于将Type对象快捷实例化为对象</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token comment\">//首先得到Type</span>\n<span class=\"token class-name\">Type</span> T2 <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">Test</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      \n<span class=\"token comment\">//用无参构造实例化一个对象</span>\n<span class=\"token class-name\">Test</span> t3 <span class=\"token operator\">=</span> Activator<span class=\"token punctuation\">.</span><span class=\"token function\">CreateInstance</span><span class=\"token punctuation\">(</span>T2<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token class-name\">Test</span><span class=\"token punctuation\">;</span>\n      \n<span class=\"token comment\">//用有参构造实例化一个对象</span>\n<span class=\"token class-name\">Test</span> t4 <span class=\"token operator\">=</span> Activator<span class=\"token punctuation\">.</span><span class=\"token function\">CreateInstance</span><span class=\"token punctuation\">(</span>T2<span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"string\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10.2f</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token class-name\">Test</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h2><ul>\n<li><p>系统自带的特性</p>\n<ul>\n<li><p>过时特性</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Obsolete</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"...\"</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">true</span><span class=\"token operator\">/</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span><span class=\"token comment\">//true使用时会直接报错，false使用时会出现警告</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p>调用者信息特性</p>\n<p><img src=\"https://cbaoblog.oss-cn-shanghai.aliyuncs.com/img/image-20220922215705983.png\" alt=\"image-20220922215705983\"></p>\n</li>\n<li><p>外部Dll包函数</p>\n<p><img src=\"https://cbaoblog.oss-cn-shanghai.aliyuncs.com/img/image-20220922220118249.png\" alt=\"image-20220922220118249\"></p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"迭代器\"><a href=\"#迭代器\" class=\"headerlink\" title=\"迭代器\"></a>迭代器</h2><ul>\n<li>用yield return语法糖实现迭代器（本质是C#自动帮我们实现标准迭代器的复杂步骤）<ul>\n<li>关键接口：IEnumerable</li>\n</ul>\n</li>\n</ul>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Reflection</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">JinJie</span>\n<span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n    <span class=\"token punctuation\">&#123;</span>\n\n        <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span><span class=\"token punctuation\">:</span><span class=\"token type-list\"><span class=\"token class-name\">IEnumerable</span></span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">private</span> <span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">></span></span> L1<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">public</span> Test <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#123;</span>\n                L1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">45</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">78</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\t\t\t<span class=\"token comment\">//yield return语法糖实现迭代器</span>\n            <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">IEnumerator</span> <span class=\"token function\">GetEnumerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> L1<span class=\"token punctuation\">.</span>Count<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">yield</span> <span class=\"token keyword\">return</span> L1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">Test</span> T1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> item <span class=\"token keyword\">in</span> T1<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#123;</span>\n                Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n","feature":true,"text":"三种注释方法 双斜杠注释（//）：用于注释一行信息 星号注释（/**/）：用于注释多行信息 三斜杠注释（///）：用于注释类，命名空间等 提示 注释：Ctrl+K+C 取消注释：Ctrl+K+U 控制台的输入和输出 API 功能描述 Console.Write(); 在控制台输出...","link":"","photos":[],"count_time":{"symbolsCount":"31k","symbolsTime":"28 mins."},"categories":[{"name":"C#","slug":"C","count":1,"path":"api/categories/C.json"}],"tags":[{"name":"C#语法","slug":"C-语法","count":1,"path":"api/tags/C-语法.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%89%E7%A7%8D%E6%B3%A8%E9%87%8A%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">三种注释方法</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8E%A7%E5%88%B6%E5%8F%B0%E7%9A%84%E8%BE%93%E5%85%A5%E5%92%8C%E8%BE%93%E5%87%BA\"><span class=\"toc-text\">控制台的输入和输出</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8A%98%E5%8F%A0%E4%BB%A3%E7%A0%81%E5%9D%97\"><span class=\"toc-text\">折叠代码块</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%98%E9%87%8F%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">变量类型</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9B%9B%E7%A7%8D%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">四种类型转换方式</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BC%82%E5%B8%B8%E6%8D%95%E8%8E%B7\"><span class=\"toc-text\">异常捕获</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8B%BC%E6%8E%A5%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">字符串拼接方式</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BD%8D%E8%BF%90%E7%AE%97\"><span class=\"toc-text\">位运算</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8E%A7%E5%88%B6%E5%8F%B0%E6%8E%A7%E5%88%B6%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">控制台控制方法</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%9A%8F%E6%9C%BA%E6%95%B0\"><span class=\"toc-text\">随机数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">数组</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%80%BC%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">值类型和引用类型</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">函数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%BD%93%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">表达式体方法</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#ref%E5%92%8Cout\"><span class=\"toc-text\">ref和out</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%98%E9%95%BF%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">变长参数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD\"><span class=\"toc-text\">函数重载</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%80%92%E5%BD%92%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">递归函数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BB%93%E6%9E%84%E4%BD%93\"><span class=\"toc-text\">结构体</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">排序</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">类和对象</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6\"><span class=\"toc-text\">垃圾回收机制</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%88%90%E5%91%98%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">成员属性</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%B4%A2%E5%BC%95%E5%99%A8\"><span class=\"toc-text\">索引器</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%9D%99%E6%80%81%E6%88%90%E5%91%98\"><span class=\"toc-text\">静态成员</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%9D%99%E6%80%81%E7%B1%BB\"><span class=\"toc-text\">静态类</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%9D%99%E6%80%81%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">静态构造函数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8B%93%E5%B1%95%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">拓展方法</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD\"><span class=\"toc-text\">运算符重载</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BB%A7%E6%89%BF\"><span class=\"toc-text\">继承</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%87%8C%E6%B0%8F%E6%9B%BF%E6%8D%A2%E5%8E%9F%E5%88%99\"><span class=\"toc-text\">里氏替换原则</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%87%E7%89%A9%E4%B9%8B%E7%88%B6\"><span class=\"toc-text\">万物之父</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A3%85%E7%AE%B1%E5%92%8C%E6%8B%86%E7%AE%B1\"><span class=\"toc-text\">装箱和拆箱</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AF%86%E5%B0%81%E7%B1%BB\"><span class=\"toc-text\">密封类</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AF%86%E5%B0%81%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">密封方法</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E6%80%81\"><span class=\"toc-text\">多态</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8A%BD%E8%B1%A1%E7%B1%BB\"><span class=\"toc-text\">抽象类</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8A%BD%E8%B1%A1%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">抽象方法</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8E%A5%E5%8F%A3\"><span class=\"toc-text\">接口</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4\"><span class=\"toc-text\">命名空间</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#string\"><span class=\"toc-text\">string</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#StringBuilder\"><span class=\"toc-text\">StringBuilder</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B8%83%E5%A4%A7%E5%8E%9F%E5%88%99\"><span class=\"toc-text\">面向对象七大原则</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#C-%E5%AE%B9%E5%99%A8%E7%B1%BB\"><span class=\"toc-text\">C#容器类</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B3%9B%E5%9E%8B\"><span class=\"toc-text\">泛型</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#List\"><span class=\"toc-text\">List</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Dictionary\"><span class=\"toc-text\">Dictionary</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#LinkedList\"><span class=\"toc-text\">LinkedList</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A7%94%E6%89%98\"><span class=\"toc-text\">委托</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%8B%E4%BB%B6\"><span class=\"toc-text\">事件</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">匿名函数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Lambad%E8%A1%A8%E8%BE%BE%E5%BC%8F\"><span class=\"toc-text\">Lambad表达式</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#List%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">List排序</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8D%8F%E5%8F%98-out-%E5%92%8C%E9%80%86%E5%8F%98-in\"><span class=\"toc-text\">协变(out)和逆变(in)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8D%8F%E5%8F%98\"><span class=\"toc-text\">协变</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%80%86%E5%8F%98\"><span class=\"toc-text\">逆变</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E7%BA%BF%E7%A8%8B\"><span class=\"toc-text\">多线程</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BF%9B%E7%A8%8B\"><span class=\"toc-text\">进程</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BA%BF%E7%A8%8B\"><span class=\"toc-text\">线程</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8%E6%8C%87%E4%BB%A4\"><span class=\"toc-text\">预处理器指令</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%8D%E5%B0%84\"><span class=\"toc-text\">反射</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%89%B9%E6%80%A7\"><span class=\"toc-text\">特性</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BF%AD%E4%BB%A3%E5%99%A8\"><span class=\"toc-text\">迭代器</span></a></li></ol>","author":{"name":"cBao","slug":"blog-author","avatar":"https://cbaoblog.oss-cn-shanghai.aliyuncs.com/HeadPortrait.jpg","link":"/","description":"但求日积月累，收获于细微。<br /><b>虚幻引擎开发</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Unity3D引擎","uid":"2d7fcd3211374fac141da523879cb012","slug":"Unity3D引擎","date":"2022-09-22T15:48:50.000Z","updated":"2022-09-25T09:29:25.174Z","comments":true,"path":"api/articles/Unity3D引擎.json","keywords":null,"cover":"https://cbaoblog.oss-cn-shanghai.aliyuncs.com/UnityLogo.png","text":"场景中的对象 GameObject类对象是Unity引擎提供作为场景中所有对象的根本 Unity中脚本的基本规则 创建规则 不在VS中创建脚本 可以放在Assets文件夹下的任意位置（建议同一文件夹下） 类名和文件名必须一致，不然不能挂载（因为反射机制创建对象，会通过文件名去找T...","link":"","photos":[],"count_time":{"symbolsCount":"6.2k","symbolsTime":"6 mins."},"categories":[{"name":"Unity3D引擎","slug":"Unity3D引擎","count":1,"path":"api/categories/Unity3D引擎.json"}],"tags":[{"name":"Unity3D引擎","slug":"Unity3D引擎","count":1,"path":"api/tags/Unity3D引擎.json"}],"author":{"name":"cBao","slug":"blog-author","avatar":"https://cbaoblog.oss-cn-shanghai.aliyuncs.com/HeadPortrait.jpg","link":"/","description":"但求日积月累，收获于细微。<br /><b>虚幻引擎开发</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"UE中的网络同步RPC","uid":"321e20a64de3485e0958a3f7db00142f","slug":"UE中的网络同步RPC","date":"2022-08-15T07:32:03.000Z","updated":"2022-08-17T15:26:40.262Z","comments":true,"path":"api/articles/UE中的网络同步RPC.json","keywords":null,"cover":"https://cbaoblog.oss-cn-shanghai.aliyuncs.com/UE5LOGO.png","text":"UE网络中的服务器在哪！ 在UE中存在服务器和客户端重合，创建房间的客户端同时具备服务器特性 UE中服务器和客户端中对象的关系 在服务器端，所有的角色（Actor）都是Authority（权威的） 在客户端眼，除了自己控制的角色外，其他的所有角色都是Simulated proxy...","link":"","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"UnrealEngine","slug":"UnrealEngine","count":4,"path":"api/categories/UnrealEngine.json"}],"tags":[{"name":"网络同步RPC","slug":"网络同步RPC","count":1,"path":"api/tags/网络同步RPC.json"}],"author":{"name":"cBao","slug":"blog-author","avatar":"https://cbaoblog.oss-cn-shanghai.aliyuncs.com/HeadPortrait.jpg","link":"/","description":"但求日积月累，收获于细微。<br /><b>虚幻引擎开发</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}