{"title":"C#语法","uid":"710e93f12251a070d08d271cb7816514","slug":"CSharp语法","date":"2022-09-13T15:16:35.000Z","updated":"2022-09-13T15:20:18.516Z","comments":true,"path":"api/articles/CSharp语法.json","keywords":null,"cover":"https://cbaoblog.oss-cn-shanghai.aliyuncs.com/CSharp.png","content":"<h2 id=\"三种注释方法\"><a href=\"#三种注释方法\" class=\"headerlink\" title=\"三种注释方法\"></a>三种注释方法</h2><ul>\n<li>双斜杠注释（//）：用于注释一行信息</li>\n<li>星号注释（/**/）：用于注释多行信息</li>\n<li>三斜杠注释（///）：用于注释类，命名空间等</li>\n</ul>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">提示</p>\n<p>注释：Ctrl+K+C  取消注释：Ctrl+K+U</p>\n</div>\n<h2 id=\"控制台的输入和输出\"><a href=\"#控制台的输入和输出\" class=\"headerlink\" title=\"控制台的输入和输出\"></a>控制台的输入和输出</h2><table>\n<thead>\n<tr>\n<th align=\"center\">API</th>\n<th align=\"center\">功能描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">Console.Write();</td>\n<td align=\"center\">在控制台输出不会自动换行</td>\n</tr>\n<tr>\n<td align=\"center\">Console.WriteLine();</td>\n<td align=\"center\">在控制台输出会自动换行</td>\n</tr>\n<tr>\n<td align=\"center\">Console.ReadLine();</td>\n<td align=\"center\">等待用户输入一行，按回车键结束输入</td>\n</tr>\n<tr>\n<td align=\"center\">Console.ReadKey();</td>\n<td align=\"center\">只要用户按下任意键就结束</td>\n</tr>\n</tbody></table>\n<h2 id=\"折叠代码块\"><a href=\"#折叠代码块\" class=\"headerlink\" title=\"折叠代码块\"></a>折叠代码块</h2><pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token comment\">//用于整理代码，方便阅读，只在编辑时有效</span>\n<span class=\"token preprocessor property\">#<span class=\"token directive keyword\">region</span> </span><span class=\"token return-type class-name\">cBaoTest</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"折叠代码块\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token preprocessor property\">#<span class=\"token directive keyword\">endregion</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"变量类型\"><a href=\"#变量类型\" class=\"headerlink\" title=\"变量类型\"></a>变量类型</h2><table>\n<thead>\n<tr>\n<th align=\"left\">类型</th>\n<th align=\"center\">描述</th>\n<th align=\"center\">范围</th>\n<th align=\"center\">默认值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">bool</td>\n<td align=\"center\">布尔值</td>\n<td align=\"center\">True 或 False</td>\n<td align=\"center\">False</td>\n</tr>\n<tr>\n<td align=\"left\">byte</td>\n<td align=\"center\">8 位无符号整数</td>\n<td align=\"center\">0 到 255</td>\n<td align=\"center\">0</td>\n</tr>\n<tr>\n<td align=\"left\">char</td>\n<td align=\"center\">16 位 Unicode 字符</td>\n<td align=\"center\">U +0000 到 U +ffff</td>\n<td align=\"center\">‘\\0’</td>\n</tr>\n<tr>\n<td align=\"left\">decimal</td>\n<td align=\"center\">128 位精确的十进制值，28-29 有效位数</td>\n<td align=\"center\">(-7.9 x 1028 到 7.9 x 1028) / 100 到 28</td>\n<td align=\"center\">0.0M</td>\n</tr>\n<tr>\n<td align=\"left\">double</td>\n<td align=\"center\">64 位双精度浮点型</td>\n<td align=\"center\">(+/-)5.0 x 10-324 到 (+/-)1.7 x 10308</td>\n<td align=\"center\">0.0D</td>\n</tr>\n<tr>\n<td align=\"left\">float</td>\n<td align=\"center\">32 位单精度浮点型</td>\n<td align=\"center\">-3.4 x 1038 到 + 3.4 x 1038</td>\n<td align=\"center\">0.0F</td>\n</tr>\n<tr>\n<td align=\"left\">int</td>\n<td align=\"center\">32 位有符号整数类型</td>\n<td align=\"center\">-2,147,483,648 到 2,147,483,647</td>\n<td align=\"center\">0</td>\n</tr>\n<tr>\n<td align=\"left\">long</td>\n<td align=\"center\">64 位有符号整数类型</td>\n<td align=\"center\">-9,223,372,036,854,775,808 到 9,223,372,036,854,775,807</td>\n<td align=\"center\">0L</td>\n</tr>\n<tr>\n<td align=\"left\">sbyte</td>\n<td align=\"center\">8 位有符号整数类型</td>\n<td align=\"center\">-128 到 127</td>\n<td align=\"center\">0</td>\n</tr>\n<tr>\n<td align=\"left\">short</td>\n<td align=\"center\">16 位有符号整数类型</td>\n<td align=\"center\">-32,768 到 32,767</td>\n<td align=\"center\">0</td>\n</tr>\n<tr>\n<td align=\"left\">uint</td>\n<td align=\"center\">32 位无符号整数类型</td>\n<td align=\"center\">0 到 4,294,967,295</td>\n<td align=\"center\">0</td>\n</tr>\n<tr>\n<td align=\"left\">ulong</td>\n<td align=\"center\">64 位无符号整数类型</td>\n<td align=\"center\">0 到 18,446,744,073,709,551,615</td>\n<td align=\"center\">0</td>\n</tr>\n<tr>\n<td align=\"left\">ushort</td>\n<td align=\"center\">16 位无符号整数类型</td>\n<td align=\"center\">0 到 65,535</td>\n<td align=\"center\">0</td>\n</tr>\n</tbody></table>\n<h2 id=\"四种类型转换方式\"><a href=\"#四种类型转换方式\" class=\"headerlink\" title=\"四种类型转换方式\"></a>四种类型转换方式</h2><ul>\n<li><p>括号强转</p>\n<ul>\n<li>用于将大范围数转换成小范围数，不安全转换</li>\n<li>bool和string类型不支持该强转</li>\n</ul>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">sbyte</span></span> s1<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sbyte</span><span class=\"token punctuation\">)</span>i<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n<li><p>Parse转换</p>\n<ul>\n<li>将字符串转换为对应类型，安全转换</li>\n</ul>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> TestInt <span class=\"token operator\">=</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1234\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p>Convert转换</p>\n<ul>\n<li>各个类型之间的转换</li>\n</ul>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">float</span></span> f1 <span class=\"token operator\">=</span> <span class=\"token number\">3.4f</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> Convert<span class=\"token punctuation\">.</span><span class=\"token function\">ToInt32</span><span class=\"token punctuation\">(</span>f1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n<li><p>ToString转换</p>\n<ul>\n<li>其它类型转成string类型</li>\n</ul>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">float</span></span> f1 <span class=\"token operator\">=</span> <span class=\"token number\">3.4f</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">string</span></span> s1 <span class=\"token operator\">=</span> f1<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"异常捕获\"><a href=\"#异常捕获\" class=\"headerlink\" title=\"异常捕获\"></a>异常捕获</h2><pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> s1 <span class=\"token operator\">=</span> <span class=\"token string\">\"请输入语文成绩:\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//try尝试捕获错误</span>\n    <span class=\"token keyword\">try</span>\n    <span class=\"token punctuation\">&#123;</span>\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        YuWen <span class=\"token operator\">=</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span>Console<span class=\"token punctuation\">.</span><span class=\"token function\">ReadLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//若try中有错误将执行catch中代码</span>\n    <span class=\"token keyword\">catch</span>\n    <span class=\"token punctuation\">&#123;</span>\n        s1 <span class=\"token operator\">=</span> <span class=\"token string\">\"输入不合法，请重新输入语文成绩:\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"字符串拼接方式\"><a href=\"#字符串拼接方式\" class=\"headerlink\" title=\"字符串拼接方式\"></a>字符串拼接方式</h2><ul>\n<li><p>使用+号</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token comment\">//+号两边必须要有一个string类型</span>\n<span class=\"token class-name\"><span class=\"token keyword\">string</span></span> s1<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\ns1 <span class=\"token operator\">+=</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//结果是6</span>\ns1 <span class=\"token operator\">+=</span><span class=\"token string\">\" \"</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//结果是123，从第一个字符串类型之后都会自动调用ToString之后在进行拼接</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>使用string.Format()</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token comment\">//拼接的内容用占位符代替，数字0~n</span>\n<span class=\"token comment\">//内容不能少于占位符</span>\n<span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">Format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&#123;0&#125;,&#123;1&#125;\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"cBao\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"nice\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"位运算\"><a href=\"#位运算\" class=\"headerlink\" title=\"位运算\"></a>位运算</h2><ul>\n<li>二进制按位进行运算</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">位运算符</th>\n<th align=\"center\">介绍</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">按位与 &amp;</td>\n<td align=\"center\">有0则0</td>\n</tr>\n<tr>\n<td align=\"center\">按位或 |</td>\n<td align=\"center\">有1则1</td>\n</tr>\n<tr>\n<td align=\"center\">按位异或 ^</td>\n<td align=\"center\">相同为0，不同为1</td>\n</tr>\n<tr>\n<td align=\"center\">按位取反 ~</td>\n<td align=\"center\">0变1，1变0</td>\n</tr>\n<tr>\n<td align=\"center\">左移 &lt;&lt;</td>\n<td align=\"center\">左移几位，右边加几个0</td>\n</tr>\n<tr>\n<td align=\"center\">右移 &gt;&gt;</td>\n<td align=\"center\">右移几位，右侧去掉几个数</td>\n</tr>\n</tbody></table>\n<h2 id=\"控制台控制方法\"><a href=\"#控制台控制方法\" class=\"headerlink\" title=\"控制台控制方法\"></a>控制台控制方法</h2><ul>\n<li><p>清空</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\">Console<span class=\"token punctuation\">.</span><span class=\"token function\">Clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li><p>设置窗口大小，屏幕缓冲区大小</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\">Console<span class=\"token punctuation\">.</span><span class=\"token function\">SetWindowSize</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">SetBufferSize</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n</ul>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">提示</p>\n<ol>\n<li>先设置窗口大小，在设置屏幕缓冲区大小</li>\n<li>屏幕缓冲区大小不能小于窗口大小</li>\n<li>窗口大小不能大于控制台最大尺寸</li>\n</ol>\n\n</div>\n<ul>\n<li><p>设置光标位置</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\">Console<span class=\"token punctuation\">.</span><span class=\"token function\">SetCursorPosition</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">提示</p>\n<p><p>x和y的单位不同，1y=2x 视觉上</p>\n</p>\n</div>\n<ul>\n<li><p>控制台颜色</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token comment\">//文字颜色</span>\nConsole<span class=\"token punctuation\">.</span>ForegroundColor <span class=\"token operator\">=</span> ConsoleColor<span class=\"token punctuation\">.</span>Red<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//背景颜色</span>\n Console<span class=\"token punctuation\">.</span>BackgroundColor <span class=\"token operator\">=</span> ConsoleColor<span class=\"token punctuation\">.</span>Blue<span class=\"token punctuation\">;</span>\n Console<span class=\"token punctuation\">.</span><span class=\"token function\">Clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//设置背景颜色后必须用Clear一次</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>光标显示隐藏</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\">Console<span class=\"token punctuation\">.</span>CursorVisible <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span>CursorVisible <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n<li><p>关闭控制台</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\">Environment<span class=\"token punctuation\">.</span><span class=\"token function\">Exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//在调试状态下无效</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"随机数\"><a href=\"#随机数\" class=\"headerlink\" title=\"随机数\"></a>随机数</h2><ul>\n<li><p>固定写法</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"> <span class=\"token comment\">//创建随机数对象</span>\n <span class=\"token class-name\">Random</span> r <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token comment\">//0~99的随机数</span>\n <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">Next</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token comment\">//生成一个大于0的随机数</span>\n <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i2 <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">Next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>i2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//生成一个大于等于8小于13的一个随机数</span>\n <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i3 <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">Next</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>i3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h2><ul>\n<li><p>数组的声明方式</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token comment\">//第一种</span>\n<span class=\"token class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> Arr<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//第二种</span>\n<span class=\"token class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> Arr_2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">int</span></span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//第三种</span>\n<span class=\"token class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> Arr_3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">int</span></span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//第四种</span>\n<span class=\"token class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> Arr_4 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//第五种</span>\n<span class=\"token class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> Arr_5 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>二维数组</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token comment\">//声明一个2行3列的二维数组</span>\n<span class=\"token class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">]</span></span> Arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">int</span></span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//获得行数</span>\n<span class=\"token class-name\"><span class=\"token keyword\">int</span></span> x<span class=\"token operator\">=</span>Arr<span class=\"token punctuation\">.</span><span class=\"token function\">GetLength</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//获得列数</span>\n<span class=\"token class-name\"><span class=\"token keyword\">int</span></span> y<span class=\"token operator\">=</span>Arr<span class=\"token punctuation\">.</span><span class=\"token function\">GetLength</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"值类型和引用类型\"><a href=\"#值类型和引用类型\" class=\"headerlink\" title=\"值类型和引用类型\"></a>值类型和引用类型</h2><p>值类型：基本变量类型，结构体，存储在栈空间，由计算机管理（它变我不变）</p>\n<p>引用类型：string（特殊，更像值类型）,数组，类，存储在堆空间，由程序员进行管理（它变我也变(用new可解除)）</p>\n<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><ul>\n<li>写在class或者struct中</li>\n</ul>\n<h2 id=\"ref和out\"><a href=\"#ref和out\" class=\"headerlink\" title=\"ref和out\"></a>ref和out</h2><ul>\n<li><p>用于函数重载时ref和out不能同时修饰同一变量</p>\n</li>\n<li><p>ref类似C++中的引用，传入的变量必须初始化，可以不在内部赋值</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> A<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    A <span class=\"token operator\">=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">int</span></span> A <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//初始化</span>\n<span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//A被改成30</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>out与ref功能一样，但是传入的变量不必初始化，必须在内部赋值</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">out</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> A<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    A <span class=\"token operator\">=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">int</span></span> A<span class=\"token punctuation\">;</span><span class=\"token comment\">//不必初始化</span>\n<span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">out</span> A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//A被改成30</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"变长参数\"><a href=\"#变长参数\" class=\"headerlink\" title=\"变长参数\"></a>变长参数</h2><ul>\n<li><p>关键字：params</p>\n</li>\n<li><p>一个函数中只能有一个变长参数，且必须在最后一个参数</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> <span class=\"token function\">ParamSum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">params</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> Arr<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> Sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> Arr<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#123;</span>\n    Sum <span class=\"token operator\">+=</span> Arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> Sum<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"函数重载\"><a href=\"#函数重载\" class=\"headerlink\" title=\"函数重载\"></a>函数重载</h2><ul>\n<li>与C++函数重载类似</li>\n</ul>\n<h2 id=\"递归函数\"><a href=\"#递归函数\" class=\"headerlink\" title=\"递归函数\"></a>递归函数</h2><ul>\n<li>自己调用自己的函数</li>\n<li>必须要有能结束函数调用的条件</li>\n</ul>\n<h2 id=\"结构体\"><a href=\"#结构体\" class=\"headerlink\" title=\"结构体\"></a>结构体</h2><ul>\n<li><p>一般写在namespace中</p>\n</li>\n<li><p>结构体中声明的变量<strong>不能直接初始化</strong></p>\n</li>\n<li><p>在结构体中函数不需要添加static关键字</p>\n</li>\n<li><p>结构体构造函数</p>\n<ul>\n<li>没有返回值</li>\n<li>必须有参数</li>\n<li>函数名与结构体名相同</li>\n<li>必须在其中对所有变量数据初始化</li>\n</ul>\n</li>\n<li><p><strong>C#中struct默认访问修饰符是private</strong></p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">cBao</span>\n<span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> Name<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> Age<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> Number<span class=\"token punctuation\">;</span>\n\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">PrintfName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>Name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h2><ul>\n<li><p>冒泡排序</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token comment\">//升序</span>\n<span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">BubbleSortUp</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> Arr<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> x <span class=\"token operator\">&lt;</span> Arr<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span> x<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> y <span class=\"token operator\">&lt;</span> Arr<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token operator\">-</span>x<span class=\"token punctuation\">;</span> y<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Arr<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> Arr<span class=\"token punctuation\">[</span>y <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> Temp <span class=\"token operator\">=</span> Arr<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                Arr<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Arr<span class=\"token punctuation\">[</span>y <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                Arr<span class=\"token punctuation\">[</span>y <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Temp<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//降序</span>\n<span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">BubbleSortDown</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> Arr<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> x <span class=\"token operator\">&lt;</span> Arr<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span> x<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> y <span class=\"token operator\">&lt;</span> Arr<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token operator\">-</span>x<span class=\"token punctuation\">;</span> y<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Arr<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> Arr<span class=\"token punctuation\">[</span>y <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> Temp <span class=\"token operator\">=</span> Arr<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                Arr<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Arr<span class=\"token punctuation\">[</span>y <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                Arr<span class=\"token punctuation\">[</span>y <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Temp<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//优化版</span>\n<span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">BubbleSortUp</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> Arr<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n\n            <span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> isSort <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> x <span class=\"token operator\">&lt;</span> Arr<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span> x<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> y <span class=\"token operator\">&lt;</span> Arr<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token operator\">-</span>x<span class=\"token punctuation\">;</span> y<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Arr<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> Arr<span class=\"token punctuation\">[</span>y <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">&#123;</span>\n                        isSort <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> Temp <span class=\"token operator\">=</span> Arr<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                        Arr<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Arr<span class=\"token punctuation\">[</span>y <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                        Arr<span class=\"token punctuation\">[</span>y <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Temp<span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isSort<span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"类和对象\"><a href=\"#类和对象\" class=\"headerlink\" title=\"类和对象\"></a>类和对象</h2><ul>\n<li>一般声明在namespace中</li>\n<li>类是一个引用类型</li>\n<li><strong>不能在类中实例化一个相同类型的变量</strong></li>\n<li>访问修饰符与C++类似</li>\n<li>构造函数规则与C++类似</li>\n<li>析构函数（Unity中基本不会使用），C#中存在自动垃圾回收机制GC一般也不使用</li>\n</ul>\n<h2 id=\"垃圾回收机制\"><a href=\"#垃圾回收机制\" class=\"headerlink\" title=\"垃圾回收机制\"></a>垃圾回收机制</h2><ul>\n<li><p>GC只负责堆（Heap）内存的垃圾回收</p>\n</li>\n<li><p>引用类型都是存在于堆（Heap）中</p>\n</li>\n<li><p>手动触发垃圾回收方法</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\">GC<span class=\"token punctuation\">.</span><span class=\"token function\">Collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"成员属性\"><a href=\"#成员属性\" class=\"headerlink\" title=\"成员属性\"></a>成员属性</h2><ul>\n<li><p>用于保护成员变量</p>\n</li>\n<li><p>为成员属性的获取和赋值添加逻辑处理</p>\n</li>\n<li><p>get和set的访问权限不能高于或者等于外部访问权限</p>\n</li>\n<li><p>用帕斯卡命名法</p>\n</li>\n<li><p>get和set可以只有一个</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">TestInfo</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> name<span class=\"token punctuation\">;</span>\n  \n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Name\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">get</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n  \n        <span class=\"token keyword\">set</span>\n        <span class=\"token punctuation\">&#123;</span>\n            name <span class=\"token operator\">=</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n  \n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p>自动属性（特殊需求）</p>\n<ul>\n<li><p>用于外部能得不能改的变量</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">TestInfo</span>\n   <span class=\"token punctuation\">&#123;</span>\n       <span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> name<span class=\"token punctuation\">;</span>\n    \n       <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Name\n       <span class=\"token punctuation\">&#123;</span>\n           <span class=\"token keyword\">get</span>\n           <span class=\"token punctuation\">&#123;</span>\n               <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span>             \n           <span class=\"token punctuation\">&#125;</span>\n    \n           <span class=\"token keyword\">set</span>\n           <span class=\"token punctuation\">&#123;</span>\n               name <span class=\"token operator\">=</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">;</span>\n               <span class=\"token comment\">//可以直接在类内当成员变量直接使用</span>\n               Age <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n           <span class=\"token punctuation\">&#125;</span>\n       <span class=\"token punctuation\">&#125;</span>\n    \n       <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> Age\n       <span class=\"token punctuation\">&#123;</span>\n           <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span>\n           <span class=\"token keyword\">private</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span>\n       \n       <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"索引器\"><a href=\"#索引器\" class=\"headerlink\" title=\"索引器\"></a>索引器</h2><ul>\n<li><p>一般成员中有<strong>数组参数</strong>时可以简化使用</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyArr</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> arr<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> currentIndex<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//查</span>\n        <span class=\"token comment\">//改</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> index<span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">get</span>\n            <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> index <span class=\"token operator\">&lt;=</span> currentIndex<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">set</span> \n            <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> index <span class=\"token operator\">&lt;=</span> currentIndex<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">&#123;</span>\n                    arr<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token keyword\">else</span>\n                <span class=\"token punctuation\">&#123;</span>\n                    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"索引超过数组范围\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">&#125;</span>\n\n            <span class=\"token punctuation\">&#125;</span>\n        \n       <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"静态成员\"><a href=\"#静态成员\" class=\"headerlink\" title=\"静态成员\"></a>静态成员</h2><ul>\n<li>用static修饰的成员变量，方法，属性等称为静态成员，具有唯一性</li>\n<li>可以直接用类名 **. ** 出来使用</li>\n<li>静态成员与程序同生共死（程序运行就会在静态存储区分配内存）</li>\n<li>静态成员<strong>不能直接使用</strong>非静态成员（因为此时普通成员还没有被实例化）</li>\n<li>静态变量：1.常用于唯一变量的声明，2.方便别人获取的对象申明</li>\n<li>静态方法：常用的唯一方法申明</li>\n<li>const常量是一种特殊的static成员，也可以直接用类名 <strong>.</strong> 出来使用</li>\n</ul>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//将构造函数声明成私有保证外部不能创建对象</span>\n    <span class=\"token keyword\">private</span> <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n\n\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">//静态成员变量保证唯一性</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Test</span> t <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//成员属性方法保证只能外部得不能改</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">Test</span> T\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">get</span> \n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> t<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>      \n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是一个单例\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        \n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        Test<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">.</span><span class=\"token function\">Print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> \n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"静态类\"><a href=\"#静态类\" class=\"headerlink\" title=\"静态类\"></a>静态类</h2><ul>\n<li>用static修饰的类</li>\n<li>静态类不能被实例化</li>\n<li>只能存在静态成员</li>\n<li>一般用于唯一工具类（将常用的静态成员写在静态类中，方便使用）</li>\n</ul>\n<h2 id=\"静态构造函数\"><a href=\"#静态构造函数\" class=\"headerlink\" title=\"静态构造函数\"></a>静态构造函数</h2><ul>\n<li>用static修饰的构造函数</li>\n<li>静态类和普通类都可以存在静态构造函数</li>\n<li>不能有参数</li>\n<li>只会自动调用一次</li>\n<li>用于在静态构造函数中初始化静态变量 </li>\n</ul>\n<h2 id=\"拓展方法\"><a href=\"#拓展方法\" class=\"headerlink\" title=\"拓展方法\"></a>拓展方法</h2><ul>\n<li><p>为现有<strong>非静态的变量</strong>类型添加新方法</p>\n</li>\n<li><p>一定写在<strong>静态类</strong>中</p>\n</li>\n<li><p>一定是<strong>静态函数</strong></p>\n</li>\n<li><p>基本语法</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token comment\">//访问修饰符 static 返回值 函数名(this 拓展类型 参数名,参数类型 参数名...)</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Tool</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">SpeadValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> Value<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"int拓展方法\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token punctuation\">&#125;</span>\n    \n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"运算符重载\"><a href=\"#运算符重载\" class=\"headerlink\" title=\"运算符重载\"></a>运算符重载</h2><ul>\n<li><p>让自定义类和结构体对象可以进行运算</p>\n</li>\n<li><p>条件运算符需要成对实现</p>\n</li>\n<li><p>一个符号可以多个重载</p>\n</li>\n<li><p>不能使用ref和out</p>\n</li>\n<li><p>基本语法</p>\n<pre class=\"line-numbers language-csharp\" data-language=\"csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Point</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> x<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> y<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">Point</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> x<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> y<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    \n    <span class=\"token comment\">//访问修饰符 static 返回类型 operator 运算符(参数列表)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span> <span class=\"token operator\">==</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Point</span> A<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Point</span> B<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">.</span>x <span class=\"token operator\">==</span> B<span class=\"token punctuation\">.</span>x <span class=\"token operator\">&amp;&amp;</span> A<span class=\"token punctuation\">.</span>y <span class=\"token operator\">==</span> B<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    \n    <span class=\"token comment\">//访问修饰符 static 返回类型 operator 运算符(参数列表)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span> <span class=\"token operator\">!=</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Point</span> A<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Point</span> B<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">.</span>x <span class=\"token operator\">!=</span> B<span class=\"token punctuation\">.</span>x <span class=\"token operator\">||</span> A<span class=\"token punctuation\">.</span>y <span class=\"token operator\">!=</span> B<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n","feature":true,"text":"三种注释方法 双斜杠注释（//）：用于注释一行信息 星号注释（/**/）：用于注释多行信息 三斜杠注释（///）：用于注释类，命名空间等 提示 注释：Ctrl+K+C 取消注释：Ctrl+K+U 控制台的输入和输出 API 功能描述 Console.Write(); 在控制台输出...","link":"","photos":[],"count_time":{"symbolsCount":"9.1k","symbolsTime":"8 mins."},"categories":[{"name":"C#","slug":"C","count":1,"path":"api/categories/C.json"}],"tags":[{"name":"C#语法","slug":"C-语法","count":1,"path":"api/tags/C-语法.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%89%E7%A7%8D%E6%B3%A8%E9%87%8A%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">三种注释方法</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8E%A7%E5%88%B6%E5%8F%B0%E7%9A%84%E8%BE%93%E5%85%A5%E5%92%8C%E8%BE%93%E5%87%BA\"><span class=\"toc-text\">控制台的输入和输出</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8A%98%E5%8F%A0%E4%BB%A3%E7%A0%81%E5%9D%97\"><span class=\"toc-text\">折叠代码块</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%98%E9%87%8F%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">变量类型</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9B%9B%E7%A7%8D%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">四种类型转换方式</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BC%82%E5%B8%B8%E6%8D%95%E8%8E%B7\"><span class=\"toc-text\">异常捕获</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8B%BC%E6%8E%A5%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">字符串拼接方式</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BD%8D%E8%BF%90%E7%AE%97\"><span class=\"toc-text\">位运算</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8E%A7%E5%88%B6%E5%8F%B0%E6%8E%A7%E5%88%B6%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">控制台控制方法</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%9A%8F%E6%9C%BA%E6%95%B0\"><span class=\"toc-text\">随机数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">数组</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%80%BC%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">值类型和引用类型</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">函数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#ref%E5%92%8Cout\"><span class=\"toc-text\">ref和out</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%98%E9%95%BF%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">变长参数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD\"><span class=\"toc-text\">函数重载</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%80%92%E5%BD%92%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">递归函数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BB%93%E6%9E%84%E4%BD%93\"><span class=\"toc-text\">结构体</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">排序</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">类和对象</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6\"><span class=\"toc-text\">垃圾回收机制</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%88%90%E5%91%98%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">成员属性</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%B4%A2%E5%BC%95%E5%99%A8\"><span class=\"toc-text\">索引器</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%9D%99%E6%80%81%E6%88%90%E5%91%98\"><span class=\"toc-text\">静态成员</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%9D%99%E6%80%81%E7%B1%BB\"><span class=\"toc-text\">静态类</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%9D%99%E6%80%81%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">静态构造函数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8B%93%E5%B1%95%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">拓展方法</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD\"><span class=\"toc-text\">运算符重载</span></a></li></ol>","author":{"name":"cBao","slug":"blog-author","avatar":"https://cbaoblog.oss-cn-shanghai.aliyuncs.com/HeadPortrait.jpg","link":"/","description":"但求日积月累，收获于细微。<br /><b>虚幻引擎开发</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"UE中的网络同步RPC","uid":"321e20a64de3485e0958a3f7db00142f","slug":"UE中的网络同步RPC","date":"2022-08-15T07:32:03.000Z","updated":"2022-08-17T15:26:40.262Z","comments":true,"path":"api/articles/UE中的网络同步RPC.json","keywords":null,"cover":"https://cbaoblog.oss-cn-shanghai.aliyuncs.com/UE5LOGO.png","text":"UE网络中的服务器在哪！ 在UE中存在服务器和客户端重合，创建房间的客户端同时具备服务器特性 UE中服务器和客户端中对象的关系 在服务器端，所有的角色（Actor）都是Authority（权威的） 在客户端眼，除了自己控制的角色外，其他的所有角色都是Simulated proxy...","link":"","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"UnrealEngine","slug":"UnrealEngine","count":4,"path":"api/categories/UnrealEngine.json"}],"tags":[{"name":"网络同步RPC","slug":"网络同步RPC","count":1,"path":"api/tags/网络同步RPC.json"}],"author":{"name":"cBao","slug":"blog-author","avatar":"https://cbaoblog.oss-cn-shanghai.aliyuncs.com/HeadPortrait.jpg","link":"/","description":"但求日积月累，收获于细微。<br /><b>虚幻引擎开发</b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}