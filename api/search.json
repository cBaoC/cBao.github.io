[{"id":"29c0bb26f17c8d5598125731d7dbd2bf","title":"C++多线程","content":"std::thread常用API\n\n\nAPI\n说明\n\n\n\njoin\n等待线程结束并清理资源，会阻塞主线程\n\n\njoinable\n检测线程是否可以执行join函数，返回bool\n\n\ndetach\n将线程与调用其的线程分离，彼此独立执行，调用此函数会使其不能被join\n\n\nget_id\n获取线程id\n\n\nswap\n交换两个线程\n\n\nThread.hardware_concurrency\n获得硬件可创建的线程数量\n\n\n\n\n\n\n\n\n\n注意\n使用std::thread需要包含头文件#include \n\n\n向线程中传递参数\n向函数中传递参数\n#include &lt;iostream>\n#include &lt;thread>\n\nvoid Printf_Fun(std::string Text)\n&#123;\n\tstd::cout &lt;&lt; Text &lt;&lt; std::endl;\n&#125;\n\nint main()\n&#123;\n\tstd::thread Thread(Printf_Fun, \"传递一个参数\");\n\tThread.join();\n&#125;\n向Lambda表达式中传递参数\n#include &lt;iostream>\n#include &lt;thread>\n\nint main()\n&#123;\n\tint TestAge = 24;\n\tstd::thread Thread([&amp;](const std::string&amp; s1)\n\t\t&#123;\n\t\t\tstd::cout &lt;&lt; s1 &lt;&lt; \":\" &lt;&lt; TestAge &lt;&lt; \"岁\" &lt;&lt; std::endl;\n\t\t&#125;, \"我今年\");\n\tThread.join();\n&#125;\n向类对象中传递参数\n#include &lt;iostream>\n#include &lt;thread>\n\nclass Personnel\n&#123;\npublic:\n\tPersonnel(std::string InputName, int InputAge) :Name(InputName), Age(InputAge), ID()&#123;&#125;\n\tvoid Printf_Info(const std::string &amp;ID);\nprivate:\n\tstd::string Name;\n\tint Age;\n\tstd::string ID;\n&#125;;\n\nvoid Personnel::Printf_Info(const std::string&amp; ID)\n&#123;\n\tstd::cout &lt;&lt; \"姓名:\" &lt;&lt; Name &lt;&lt; std::endl;\n\tstd::cout &lt;&lt; \"年龄:\" &lt;&lt; Age &lt;&lt; std::endl;\n\tstd::cout &lt;&lt; \"ID:\" &lt;&lt; ID &lt;&lt; std::endl;\n&#125;\n\nint main()\n&#123;\n\tPersonnel Personnel_1(\"cBao\", 24);\n\tstd::thread Thread(&amp;Personnel::Printf_Info, &amp;Personnel_1,\"1059\");\n\tThread.join();\n&#125;\n\n","slug":"C-多线程","date":"2022-07-10T13:36:04.000Z","categories_index":"C++","tags_index":"多线程","author_index":"cBao"},{"id":"29c0bb26f17c8d5598125731d7dbd2bf","title":"C++多线程","content":"","slug":"C++11多线程","date":"2022-07-10T13:36:04.000Z","categories_index":"","tags_index":"","author_index":"cBao"},{"id":"8655ec3b78f346469051ac63e86fd947","title":"C存储类","content":"C存储类\n\n\n\n\n\n\n注意\n存储类定义 C 程序中变量/函数的范围（可见性）和生命周期。这些说明符放置在它们所修饰的类型之前\nC中四种存储类：\n\nauto\nregister\nstatic\nextern\n\n\n\nauto 存储类auto 存储类是所有局部变量默认的存储类\n//注意是在花括号里的局部变量,Age1和Age2是相同存储类\n&#123;\n\tint Age1\n\tauto int Age2;\n&#125;\n\n\n\n\n\n\n\n\n注意\nauto只能修饰在函数内的局部变量\n\n\nregister 存储类register 存储类用于定义存储在寄存器中而不是 RAM 中的局部变量\n&#123;\n\tregister int Miles;\n&#125;\n\n\n\n\n\n\n\n\n注意\n寄存器只用于需要快速访问的变量，比如计数器\n不能对register修饰的变量使用取地址符”&amp;”，因为不在RAM中，所以没有内存地址\n定义 ‘register’ 并不意味着变量将被存储在寄存器中，它意味着变量可能存储在寄存器中，这取决于硬件和实现的限制\n\n\nstatic 存储类作用于局部变量：\n\nstatic 存储类指示编译器在程序的生命周期内保持局部变量的存在\n使用 static 修饰局部变量可以在函数调用之间保持局部变量的值\n\n作用于全局变量：\n\n当 static 修饰全局变量时，会使变量的作用域限制在声明它的文件内\n全局声明的一个 static 变量或方法可以被任何函数或方法调用，只要这些方法出现在跟 static 变量或方法同一个文件\n\nextern 存储类\nextern 存储类用于提供一个全局变量的引用，全局变量对所有的程序文件都是可见的\n对于无法初始化的变量，会把变量名指向一个之前定义过的存储位置\nextern 修饰符通常用于当有两个或多个文件共享相同的全局变量或函数的时候\n\n","slug":"C存储类","date":"2022-07-10T08:12:03.000Z","categories_index":"C","tags_index":"C","author_index":"cBao"},{"id":"91073ca00ced3eaf093ce066e8170e85","title":"C数据类型","content":"C数据类型\n","slug":"C数据类型","date":"2022-07-09T07:51:09.000Z","categories_index":"C","tags_index":"C","author_index":"cBao"},{"id":"8b894e11fa6b8b7cfc1195c4546ad7f2","title":"C基本语法","content":"C中两种注释方法\n双斜杠”//“：适合单行注释\n//本行是注释代码\n/**/“：适合多行注释\n/*\n多行注释\n多行注释\n*/\n\n\n\n\n\n\n\n提示\n在Visual Studio中可用\n快捷键Ctrl + K + C快速注释\nCtrl + K + U快速取消注释\n\n分号 ;在C程序中分号”;“（英文输入法下）代表一条语句的结束\n标识符C语言中用来命名变量和函数名称等统称为标识符，C语言是区分大小写的\n\n\n\n\n\n\n\n注意\nC中标识符必须以字母 A-Z 或 a-z 或下划线 _ 开始，不能以数字作为开头，不允许出现标点字符，且不能与下表中关键字同名\n\n关键字\n\n\n关键字\n说明\n\n\n\nauto\n声明自动变量\n\n\nbreak\n跳出当前循环\n\n\ncase\n开关语句分支\n\n\nchar\n声明字符型变量或函数返回值类型\n\n\nconst\n定义常量，如果一个变量被 const 修饰，那么它的值就不能再被改变\n\n\ncontinue\n结束当前循环，开始下一轮循环\n\n\ndefault\n开关语句中的”其它”分支\n\n\ndo\n循环语句的循环体\n\n\ndouble\n声明双精度浮点型变量或函数返回值类型\n\n\nelse\n条件语句否定分支（与 if 连用）\n\n\nenum\n声明枚举类型\n\n\nextern\n声明变量或函数是在其它文件或本文件的其他位置定义\n\n\nfloat\n声明浮点型变量或函数返回值类型\n\n\nfor\n一种循环语句\n\n\ngoto\n无条件跳转语句\n\n\nif\n条件语句\n\n\nint\n声明整型变量或函数\n\n\nlong\n声明长整型变量或函数返回值类型\n\n\nregister\n声明寄存器变量\n\n\nreturn\n子程序返回语句（可以带参数，也可不带参数）\n\n\nshort\n声明短整型变量或函数\n\n\nsigned\n声明有符号类型变量或函数\n\n\nsizeof\n计算数据类型或变量长度（即所占字节数）\n\n\nstatic\n声明静态变量\n\n\nstruct\n声明结构体类型\n\n\nswitch\n用于开关语句\n\n\ntypedef\n用以给数据类型取别名\n\n\nunsigned\n声明无符号类型变量或函数\n\n\nunion\n声明共用体类型\n\n\nvoid\n声明函数无返回值或无参数，声明无类型指针\n\n\nvolatile\n说明变量在程序执行中可被隐含地改变\n\n\nwhile\n循环语句的循环条件\n\n\n\n\n\n\n\n\n\n特别注意\n关键字不能作为常量名、变量名或其他标识符名称\n\n\n\n","slug":"C基本语法","date":"2022-07-08T15:10:17.000Z","categories_index":"C","tags_index":"C","author_index":"cBao"},{"id":"f58daaa95359f10d1d47b72330587f5d","title":"VisualStudio常用操作","content":"Visual Studio中常用的快捷键\n\n\n快捷键\n功能\n\n\n\nCtrl + K, O\n在头文件与源文件之间切换\n\n\nCtrl + K, C\n注释选择行\n\n\nCtrl + K, U\n取消选择行的注释\n\n\nCtrl + K, D\n对齐所有代码\n\n\nCtrl+Shift+U\n全部变为大写\n\n\nCtrl+U\n全部变为小写\n\n\nAlt+鼠标左按钮\n选择矩形文本\n\n\nCtrl+F\n在当前文件中查找\n\n\nCtrl+Shift+F\n在当前的解决方案中查找\n\n\n","slug":"Visual Studio常用操作","date":"2022-07-07T03:18:50.000Z","categories_index":"IDE","tags_index":"Visual Studio","author_index":"cBao"}]