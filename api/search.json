[{"id":"f58daaa95359f10d1d47b72330587f5d","title":"VisualStudio常用操作","content":"shfhsa\nVisual Studio中常用的快捷键\n\n\n快捷键\n功能\n\n\n\nCtrl + K, O\n在头文件与源文件之间切换\n\n\nCtrl + K, C\n注释选择行\n\n\nCtrl + K, U\n取消选择行的注释\n\n\nCtrl + K, D\n对齐所有代码\n\n\nCtrl+Shift+U\n全部变为大写\n\n\nCtrl+U\n全部变为小写\n\n\nAlt+鼠标左按钮\n选择矩形文本\n\n\nCtrl+F\n在当前文件中查找\n\n\nCtrl+Shift+F\n在当前的解决方案中查找\n\n\n","slug":"Visual Studio常用操作","date":"2022-07-07T03:18:50.000Z","categories_index":"IDE","tags_index":"Visual Studio","author_index":"cBao"},{"id":"bc6d1f69b0b25560b0e01f064311b126","title":"C++与Blueprint","content":"UCLASS()宏标记\n用于该类对象在蓝图中的操作\n\n结构\nUCLASS(描述指令,描述指令,...)\n BlueprintType :此类可以作为蓝图中的一种变量类型使用， 类默认均可被蓝图访问 ，一般我们用此标记描述结构体，提供给蓝图访问。\n\n NotBlueprintType ：此类不可以作为蓝图中的一种变量类型使用。\n\n Blueprintable :标明当前类 可被蓝图继承 ，默认可被继承，标记关系向子类传递，子类可覆盖描述关系\n\n NotBlueprintable :标明当前类 不可被蓝图继承 ，默认可被继承，标记关系向子类传递，子类可覆盖描述关系\n\n\nUPROPERTY()宏标记\n用于将对象属性暴露到蓝图中操作\n\n语法\nUPROPERTY（标记，标记，...，meta（key=value，key=value，...））\n类型 参数名称\n BlueprintReadOnly ：标记属性在蓝图中是一个常量，只能读取无法进行操作\n\n BlueprintReadWrite ：标记属性在蓝图中可以读取，也可以进行操作，不能时私有成员函数\n\nCategory ：表明该属性在蓝图中的分类\n\n 可以使用 | 来划分分类级别\n\n\n Config ：标记此属性可被存储到指定配置文件中，启动时属性内容从配置文件中获取\n\n EditAnywhere ：该属性可在编辑器窗口中进行编辑也可在场景细节面板中编辑\n\n EditDefaultsOnly ：该属性只可在蓝图编辑器窗口编辑，无法在场景细节面板中编辑\n\n EditInstanceOnly ：该属性只能在实例中修改，不能在蓝图编辑器中修改\n\n VisibleAnywhere ：表明属性可以在属性窗口可见（原型实例中均可看到），无法编辑\n\n若标记的是组件指针，表示组件内容在细节面板中显示所有编辑项\n\n VisibleDefaultsOnly ：属性仅能在蓝图编辑器窗口可见，无法编辑\n\n若标记的是组件指针，则表示组件内容在细节面板中显示所有编辑项\n\n VisibleInstanceOnly ：属性仅能在实例属性窗口中可见，无法编辑\n\n若标记的是组件指针，则表示组件内容在细节面板中显示所有编辑项\n\n EditFixedSize ：限定动态数组长度禁止在蓝图属性面板中被修改（单一添加无法显示，需配合上述标记才可显示）\n\n AdvancedDisplay ：将属性隐藏到高级显示项中\n\n meta别名标记 ：将名称在编辑器或者细节面板中用别名代替原名\n\n\n  meta=(DisplayName=\"别名\")\n\n\n meta成员属性值域约束 ：限定值在编辑器或者细节面板中的范围\n\n  meta=(UIMin=\"0\",UIMax=\"50\")//在编辑器UI上约束，直接填入不会被约束\nmeta=(ClampMin=\"0\",ClampMax=\"50\")//在编辑器上约束，直接填入也会被约束\n\n\n meta成员属性修改状态约束 ：用一个bool变量控制另一个变量是否能被修改\n\n  UPROPERTY(EditAnywhere)\nbool bShow;\n\nUPROPERTY(EditAnywhere,meta=(EditCondition=\"bShow\"))\nint32 Test;\n\n meta修饰Transform和Location转换为小组件\n\n  UPROPERTY(meta=(MakeEditWidget=true))\n\nUFUNCTION()宏标记\n结构\nUFUNCTION(指令,指令,...,meta(key=value))\n BlueprintCallable ：该函数在蓝图中可被调用（该类被蓝图继承后才可调用）\n\n当函数参数是引用类型时，在蓝图中被当做输出针脚\nUFUNCTION(BlueprintCallable)\nvoid cBaoTest(int32&amp; C);\n\n\n\n当函数参数是const修饰的引用类型（或普通类型），在蓝图中被当做输入针脚\nUFUNCTION(BlueprintCallable)\nvoid cBaoTest(const int32&amp; C);\n\n\n\nCategory ：标明此函数在蓝图中的分类\n\n 可以使用 | 来划分分类级别\n\n\n BlueprintImplementableEvent：标记的函数只能在C++中调用，在蓝图中无法被调用 \n\n在C++中构建声明，但定义在蓝图中定义，从而达到在C++中调用蓝图的目的，cpp中无需定义\n\n类似纯虚函数，但在继承关系中蓝图不用必须重写此函数\n\n当函数没有返回类型时，在蓝图中是Event事件\n\n\n  UFUNCTION(BlueprintImplementableEvent)\nvoid cBaoTest(const int32&amp; C);\n  \n","slug":"C++与Blueprint","date":"2022-07-05T14:57:17.677Z","categories_index":"","tags_index":"","author_index":"cBao"},{"id":"b9663f58f18133b35bfe243f3e916a80","title":"Hello World","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new \"My New Post\"\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n","slug":"hello-world","date":"2022-07-05T14:47:41.978Z","categories_index":"","tags_index":"","author_index":"cBao"}]